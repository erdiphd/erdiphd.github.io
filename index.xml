<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>μβ on μβ</title>
    <link>https://matbesancon.github.io/</link>
    <description>Recent content in μβ on μβ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2019 Mathieu Besançon</copyright>
    <lastBuildDate>Mon, 29 Apr 2019 00:00:00 +0200</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Variables are not values: types and expressions in mathematical optimization</title>
      <link>https://matbesancon.github.io/post/2019-04-14-optimization-function-evaluation/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0200</pubDate>
      
      <guid>https://matbesancon.github.io/post/2019-04-14-optimization-function-evaluation/</guid>
      <description>

&lt;p&gt;This week, I came across Richard Oberdieck&amp;rsquo;s &lt;a href=&#34;https://github.com/RichardOberdieck/optimization-blog/blob/master/Why%20&#39;evaluate&#39;%20is%20the%20feature%20I%20am%20missing%20the%20most%20from%20commercial%20MIP%20solvers.ipynb&#34; target=&#34;_blank&#34;&gt;post&lt;/a&gt;,
&amp;ldquo;Why &amp;lsquo;evaluate&amp;rsquo; is the feature I am missing the most from commercial MIP solvers&amp;rdquo;.
It would indeed be practical to have for the reasons listed by the author, but
some barriers stand to have it as it is expressed in the snippets presented.&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;/p&gt;

&lt;h1 id=&#34;initial-problem-statement&#34;&gt;Initial problem statement&lt;/h1&gt;

&lt;p&gt;The author first tests the optimization of a non-linear function through scipy
as such:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;func &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cos(&lt;span style=&#34;color:#ae81ff&#34;&gt;14.5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x
func(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# 25.001603108415402&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So far so good, we are defining a scalar function, passing it a scalar value
at which it evaluates and returns the value, which is what it is
supposed to do.&lt;/p&gt;

&lt;p&gt;Now the real gripe comes when moving on to developing against a black box
solver (often commercial, closed-source), commonly used for linear,
mixed-integer problems:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; xpress &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; xp

&lt;span style=&#34;color:#75715e&#34;&gt;# Define the model and variables&lt;/span&gt;
Model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; xp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;problem()
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; xp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;var(lb&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, ub&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
Model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addVariable(x)

&lt;span style=&#34;color:#75715e&#34;&gt;# Define the objective and solve&lt;/span&gt;
test_objective &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x
Model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setObjective(test_objective)
Model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;solve()
&lt;span style=&#34;color:#75715e&#34;&gt;# test_objective(5) does not work&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;One first problem to notice here is that &lt;code&gt;test_objective&lt;/code&gt;
is at best an expression, not a function, meaning it does
not depend on an input argument but on decision variables declared globally.
That is one point why it cannot be called.&lt;/p&gt;

&lt;p&gt;Now, the rest of this article will be some thoughts on how optimization problems
could be structured and represented in a programming language.&lt;/p&gt;

&lt;p&gt;One hack that could be used is being able to set the values of &lt;code&gt;x&lt;/code&gt;, but this
needs to be done at the global level:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; xp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;var(lb&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, ub&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
Model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addVariable(x)

&lt;span style=&#34;color:#75715e&#34;&gt;# Define the objective&lt;/span&gt;
test_objective &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x

x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# evaluates test_objective with the set value of x&lt;/span&gt;
xp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;evaluale(test_objective)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Having to use the global scope, with an action on one
object (the variable &lt;code&gt;x&lt;/code&gt;) modifying another
(the &lt;code&gt;test_objective&lt;/code&gt; expression) is called a side-effect and quickly makes
things confusing as your program grows in complexity. You have to contain the
state in some way and keep track. Keeping track of value changes is
more or less fine, but the hardest part is keeping track
of value definitions. Consider the following example:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; xp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;var(lb&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, ub&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
Model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addVariable(x)
y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; xp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;var(lb&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, ub&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
Model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addVariable(y)

&lt;span style=&#34;color:#75715e&#34;&gt;# Define the objective and solve&lt;/span&gt;
test_objective &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;y
xp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;evaluale(test_objective) &lt;span style=&#34;color:#75715e&#34;&gt;# no variable set, what should this return?&lt;/span&gt;

x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
xp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;evaluale(test_objective) &lt;span style=&#34;color:#75715e&#34;&gt;# y is not set, what should this return?&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h1 id=&#34;a-terminology-problem&#34;&gt;A terminology problem&lt;/h1&gt;

&lt;p&gt;We are touching a more fundamental problem here, &lt;strong&gt;variables are not values&lt;/strong&gt;
and cannot be considered as such. Merging the term &amp;ldquo;variable&amp;rdquo; for variables
of your Python/Julia/other program with the decision variables from an
optimization problem creates a great confusion.
Just like variables, the term function is confusing here:
most optimization techniques exploit the problem structure,
think linear, disciplined convex, semi-definite; anything beyond non-linear
differentiable or black-box optimization will use the specific structure
in a specialized algorithm.
If standard functions from your programming language are used, no structure
can be leveraged by the solver, which only sees a function pointer it can pass
values to. So working with mathematical optimization forces you to re-think
what you call &amp;ldquo;variables&amp;rdquo; and what you call &amp;ldquo;functions&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;There is something we can do for the function part, which is defining
arithmetic rules over variables and expressions, which is for instance what
the JuMP modelling framework does:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; JuMP
m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Model()
&lt;span style=&#34;color:#a6e22e&#34;&gt;@variable&lt;/span&gt;(m, x1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;@variable&lt;/span&gt;(m, x2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# random affine function&lt;/span&gt;
f(a, b) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; π &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;b

f(x1, x2) &lt;span style=&#34;color:#75715e&#34;&gt;# returns a JuMP.GenericAffExpr{Float64,VariableRef}&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;@variable&lt;/span&gt;(m, y)
f(x1, x2) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y  &lt;span style=&#34;color:#75715e&#34;&gt;# also builds a JuMP.GenericAffExpr{Float64,VariableRef}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;This works especially well with affine functions because composing affine
expressions builds other affine expressions but gets more complex any time
other types of constraints are added. For some great resource on types and
functions for mathematical optimization, watch Prof. Madeleine Udell&amp;rsquo;s
&lt;a href=&#34;https://www.youtube.com/watch?v=skLGTYs5kAk&#34; target=&#34;_blank&#34;&gt;talk&lt;/a&gt; at JuliaCon17 (the Julia
syntax is from a pre-1.0 version, it may look funny).&lt;/p&gt;

&lt;h1 id=&#34;encoding-possibilities-as-sum-types&#34;&gt;Encoding possibilities as sum-types&lt;/h1&gt;

&lt;p&gt;Getting back to evaluation, to make this work, you need to know what
&lt;strong&gt;values&lt;/strong&gt; variables hold. What if the model hasn&amp;rsquo;t been optimized yet?
You could take:
1. A numerical approach and return &lt;code&gt;NaN&lt;/code&gt; (floating point value for Not-A-Number)
2. An imperative approach and throw an error when we evaluate an expression without values set or the model optimized
3. A typed functional approach and describe the possibility of presence/absence of a value through types&lt;/p&gt;

&lt;p&gt;The first approach was JuMP 0.18 and prior, the second is JuMP 0.19 and onward,
the third is the one of interest to us, if we want to describe what is happening
through types.&lt;/p&gt;

&lt;p&gt;If you show these three options to a developer used to statically-typed
functional programming, they would tell you that the first option coming to mind
is an &lt;em&gt;option&lt;/em&gt;, a type which can be either some value or nothing.
In the case of an optimization model, it would be some numerical value
if we have a value to return (that is, we optimized the model and found a
solution).
The problem is, there are many reasons for which you may have or not a value.
What you could do in that case is get more advanced information from your model.
This is the approach &lt;code&gt;JuMP&lt;/code&gt; is taking with a bunch of model attributes you
can query at any time, see the &lt;a href=&#34;http://www.juliaopt.org/JuMP.jl/stable/solutions/&#34; target=&#34;_blank&#34;&gt;documentation&lt;/a&gt;
for things you can query at any time.&lt;/p&gt;

&lt;p&gt;The problem is that querying information on the status of the problem (solved,
unsolved, impossible to solve&amp;hellip;) and getting values attached to variables can
be unrelated.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Model()
&lt;span style=&#34;color:#a6e22e&#34;&gt;@variable&lt;/span&gt;(m, x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;@variable&lt;/span&gt;(m, y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# getting status: nothing because not optimized&lt;/span&gt;
termination_status(m)
&lt;span style=&#34;color:#75715e&#34;&gt;# OPTIMIZE_NOT_CALLED::TerminationStatusCode = 0&lt;/span&gt;

primal_status(m) &lt;span style=&#34;color:#75715e&#34;&gt;# NO_SOLUTION::ResultStatusCode = 0&lt;/span&gt;

JuMP&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value(x) &lt;span style=&#34;color:#75715e&#34;&gt;# ERROR: NoOptimizer()&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# woops, we forgot that we hadn&amp;#39;t optimized yet&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;This is indeed because &lt;code&gt;x&lt;/code&gt; does not exist by itself, there is
a &amp;ldquo;magic bridge&amp;rdquo; between the variable &lt;code&gt;x&lt;/code&gt; and the model &lt;code&gt;m&lt;/code&gt;.
The computer science term for this &amp;ldquo;magic bridge&amp;rdquo; is a
&lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Side_effect_(computer_science)&#34; target=&#34;_blank&#34;&gt;side-effect&lt;/a&gt;&lt;/strong&gt;,
the same kind as mentioned earlier when we set the value of a variable at the
global scope. Again, they are fine at a small scale but are often the parts
making a program confusing. Every time I&amp;rsquo;m reviewing some code by researchers
starting out, the first thing I encourage them to do is to create self-contained
bits of code within functions and remove mutable global state.&lt;/p&gt;

&lt;h1 id=&#34;a-typed-solution-for-describing-mathematical-problems&#34;&gt;A typed solution for describing mathematical problems&lt;/h1&gt;

&lt;p&gt;We stated that the variables and model are bound together. In that case, let
us not split them but describe them as one thing and since this one thing
accepts different possible states, we will use
&lt;a href=&#34;https://en.wikipedia.org/wiki/Tagged_union&#34; target=&#34;_blank&#34;&gt;tagged unions&lt;/a&gt;, which you can
think of as C enumerations with associated values. Other synonyms for this
construct are sum types (as in OCaml and Haskell).&lt;/p&gt;

&lt;p&gt;We can think of the solution process of an optimization problem at a high level
as a function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;solve(Model(Variables, Constraints, Objective)) -&amp;gt; OptimizationResult
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;OptimizationResult&lt;/code&gt; is a sum type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OptimizationResult = Infeasible(info) | Unbounded(info) | Optimal(info) | NearOptimal(info) ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, everything can stay immutable, expressions including objective
and constraints are only used to build the model in input, they can be
evaluated at any points and just describe some expressions of variables.
The &lt;strong&gt;value&lt;/strong&gt; of the variables resulting from the optimization are on
available in cases where it makes sense. If the results are stored in the
solution info structure, we can query values where it makes sense only,
here in the &lt;code&gt;Optimal&lt;/code&gt; and &lt;code&gt;NearOptimal&lt;/code&gt; cases, with a syntax like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;match OptimizationResult {
    Optimal(info) -&amp;gt; value(info, x) # or info.value(x)
    Infeasible(info) -&amp;gt; ...
    Unbounded(info)  -&amp;gt; ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Internally, info would keep an association from variables to corresponding
values. No more confusion on what binding of your computer program represents
what symbolic variable of your problem.&lt;/p&gt;

&lt;p&gt;So why would we keep using these bindings associated with variables, if they
have never been independent from the problem in the first place? The obvious
reason that comes to mind is practical syntax, we can write expressions in
a quasi-mathematical way (here in JuMP):
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@expression&lt;/span&gt;(m, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;y)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;While if variables were attached to the model, the required syntax would be
in the flavour of:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@expression&lt;/span&gt;(m, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;m[&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;x] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;m[&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;x]&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;m[&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;y])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Which quickly becomes hard to read. Can we do better?&lt;/p&gt;

&lt;h1 id=&#34;stealing-a-solution-elsewhere&#34;&gt;Stealing a solution elsewhere&lt;/h1&gt;

&lt;p&gt;I stumbled upon an interesting solution to such problem while reading the
documentation for various probabilistic programming languages built on top
of Julia. Here is one example from &lt;a href=&#34;http://turing.ml/docs/get-started&#34; target=&#34;_blank&#34;&gt;Turing.jl&lt;/a&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@model&lt;/span&gt; gdemo(x, y) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
  s &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; InverseGamma(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
  m &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; Normal(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,sqrt(s))
  x &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; Normal(m, sqrt(s))
  y &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; Normal(m, sqrt(s))
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# sample from the model using an algorithm&lt;/span&gt;
chn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sample(gdemo(&lt;span style=&#34;color:#ae81ff&#34;&gt;1.5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), HMC(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s just one step away from imagining the same for optimization:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@optim_model&lt;/span&gt; linmodel(a, b) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
  x[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
  z &lt;span style=&#34;color:#f92672&#34;&gt;∈&lt;/span&gt; 𝔹
  cons1&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;z
  cons2&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
  Min x
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; optimize(linmodel)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Naming the constraints would be necessary to retrieve associated dual values.
Retrieving values associated with variables could be done in an associative
structure (think a dictionary/hash map). This structure removes any confusion as
to what belongs where in an optimization model. The variables &lt;code&gt;x, y, z&lt;/code&gt; are
indeed defined within a given model and explicitly &lt;strong&gt;belong&lt;/strong&gt; to it.&lt;/p&gt;

&lt;p&gt;Why are interfaces not built this way? Warning, speculative opinions below:&lt;/p&gt;

&lt;p&gt;One reason is the ubiquity of C &amp;amp; C++ in optimization.
The vast majority of commonly used solvers is built
in either of these, supporting limited programming constructs and based on
passing pointers around to change the values pointed to. Because the solvers are
built like this, interfaces follow the same constructions. Once a dominant
number of interfaces are identical, building something widely different is a
disadvantage with a steeper learning curve.&lt;/p&gt;

&lt;p&gt;Another more nuanced reason is that declarative software is hard to get right.
One often has to build everything upfront, here in the &lt;code&gt;@optim_model&lt;/code&gt; block.
Getting meaningful errors is much harder, and debugging optimization models
is already a tricky business.&lt;/p&gt;

&lt;p&gt;Lastly, lots of algorithms are based on incremental modifications of models
(think column and row generation), or combinations with other bricks. This
requires some &amp;ldquo;hackability&amp;rdquo; of the model. If one looks at Algebraic Modelling
Languages, everything seems to fall apart once you try to implement
decompositions. Usually it involves a completely different syntax for the
decomposition scheme (the imperative part) and for the model declaration
(the declarative part).&lt;/p&gt;

&lt;p&gt;So overall, even though side-effects are a central part of the barrier to
the expression of mathematical optimization in a mathematical, type-based
declarative way, they are needed because of the legacy of solvers and some
algorithms which become hairy to express without it.&lt;/p&gt;

&lt;h1 id=&#34;further-resources&#34;&gt;Further resources&lt;/h1&gt;

&lt;p&gt;As pointed above, Prof. Madeleine Udell&amp;rsquo;s &lt;a href=&#34;https://www.youtube.com/watch?v=skLGTYs5kAk&#34; target=&#34;_blank&#34;&gt;talk&lt;/a&gt;
gives some great perspectives on leveraging types for expressive optimization
modelling. For the brave and avid readers, this
&lt;a href=&#34;https://www.cs.cmu.edu/~rwh/theses/agarwal.pdf&#34; target=&#34;_blank&#34;&gt;PhD thesis&lt;/a&gt; tackles
the semantics of a formal language for optimization problems.
If you have further resources on the subject, please reach out.&lt;/p&gt;

&lt;p&gt;Thanks Richard for the initial post and the following discussion which led to
this post. For shorter and nicely written posts on optimization, go read his
&lt;a href=&#34;https://github.com/RichardOberdieck/optimization-blog&#34; target=&#34;_blank&#34;&gt;blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I try never to use the terms &amp;ldquo;mathematical programming&amp;rdquo; and
&amp;ldquo;mathematical program&amp;rdquo; which are respectively synonyms for
&amp;ldquo;mathematical optimization&amp;rdquo; and &amp;ldquo;mathematical optimization problem&amp;rdquo; respectively.
We can see why in this post: this kind of context where the term &amp;ldquo;program&amp;rdquo;
could refer to a computer program or a mathematical problem becomes very
confusing. We are in 2019 and the term &amp;ldquo;program&amp;rdquo; is now universally understood
as a computer program. Moreover, &amp;ldquo;mathematical programming&amp;rdquo; merely refers to
a problem specification, it is very confusing to say that
&amp;ldquo;linear/semi-definite/convex programming&amp;rdquo; is merely meant as putting together
a bunch of equations, not at all about how to tackle these.&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Picking different names with integer optimization</title>
      <link>https://matbesancon.github.io/post/2019-04-07-name_distances/</link>
      <pubDate>Sun, 07 Apr 2019 00:00:00 +0200</pubDate>
      
      <guid>https://matbesancon.github.io/post/2019-04-07-name_distances/</guid>
      <description>

&lt;hr /&gt;

&lt;p&gt;I must admit I am not always the most talented at social events.
One point I am especially bad at is &lt;strong&gt;remembering names&lt;/strong&gt;, and it gets
even harder when lots of people have similar or similar-sounding names.
What if we could select a list of people with names as different from each
other as possible?&lt;/p&gt;

&lt;p&gt;First some definitions, &lt;em&gt;different&lt;/em&gt; here is meant with respect to the
&lt;a href=&#34;https://en.wikipedia.org/wiki/Hamming_distance&#34; target=&#34;_blank&#34;&gt;Hamming distance&lt;/a&gt; of any two names.
This is far from ideal since Ekaterina would be quite far from Katerina, but
it will do the trick for now.&lt;/p&gt;

&lt;h2 id=&#34;graph-based-mental-model&#34;&gt;Graph-based mental model&lt;/h2&gt;

&lt;p&gt;This sounds like a problem representable as a complete graph.
The names are the vertices, and the weight associated with each edge $(i,j)$
is the distance between the names of the nodes. We want to take a subset
of $k$ nodes, such that the sum of edge weights for the induced sub-graph
is maximum. This is therefore a particular case of maximum (edge) weight clique
problem over a complete graph, which has been investigated in [1, 2] among others.&lt;/p&gt;

&lt;h2 id=&#34;a-mathematical-optimization-approach&#34;&gt;A mathematical optimization approach&lt;/h2&gt;

&lt;p&gt;This model can be expressed in a pretty compact way:&lt;/p&gt;

&lt;p&gt;$$ \max_{x,y} \sum_{(i,j)\in E} c_{ij} \cdot y_{ij} $$
subject to: $$ 2y_{ij} \leq x_i + x_j \,\, \forall (i,j) \in E$$
$$ \sum_{i} x_i \leq k $$
$$x_i, y_{ij} \in \mathbb{B} $$&lt;/p&gt;

&lt;p&gt;The graph is complete and undirected, so the set of edges is:&lt;br /&gt;
$ E = $ {$ (i,j) | i \in $ {$ 1..|V| $}$, j \in ${$ 1..i-1 $}}&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s an integer problem with a quadratic number of variables and constraints.
Some other formulations have been proposed, and there may be a specific structure
to exploit given that we have a complete graph.
For the moment though, this generic formulation will do.&lt;/p&gt;

&lt;h2 id=&#34;a-julia-implementation&#34;&gt;A Julia implementation&lt;/h2&gt;

&lt;p&gt;What we want is a function taking a collection of names and returning which
are selected. The first thing to do is build this distance matrix.
We will be using the
&lt;a href=&#34;https://github.com/matthieugomez/StringDistances.jl&#34; target=&#34;_blank&#34;&gt;StringDistances.jl&lt;/a&gt;
package not to have to re-implement the Hamming distance.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; StringDistances

hamming(s1, s2) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringDistances&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;evaluate(StringDistances&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Hamming(), s1, s2)

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; build_dist(vstr, dist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hamming)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [dist(vstr[i], vstr[j]) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; eachindex(vstr), j &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; eachindex(vstr)]
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We keep the option to change the distance function with something else later.
The optimization model can now be built, using the distance function and $k$,
the maximum number of nodes to take.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; JuMP
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; SCIP

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; max_clique(dist, k)
    m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Model(with_optimizer(SCIP&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Optimizer))
    n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; size(dist)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@variable&lt;/span&gt;(m, x[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;n], Bin)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@variable&lt;/span&gt;(m, y[i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;n,j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], Bin)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@constraint&lt;/span&gt;(m, sum(x) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; k)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@constraint&lt;/span&gt;(m, [i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;n,j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;y[i,j] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; x[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x[j])
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@objective&lt;/span&gt;(m, Max, sum(y[i,j] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; dist[i,j] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;n,j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (m, x, y)
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I&amp;rsquo;m using SCIP as an integer solver to avoid proprietary software,
feel free to switch it for your favourite one.
Note that we don&amp;rsquo;t optimize the model yet but simply build it.
It is a useful pattern when working with JuMP, allowing users
to inspect the build model or add constraints to it before starting the resolution.
The last steps are straightforward:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;dist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; build_dist(vstr)
(m, x, y) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max_clique(dist, k)
optimize!(m) &lt;span style=&#34;color:#75715e&#34;&gt;# solve the problem&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# get the subset of interest&lt;/span&gt;
diverse_names &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [vstr[i] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; eachindex(vstr) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; JuMP&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value(x[i]) ≈ &lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And voilà.&lt;/p&gt;

&lt;h2 id=&#34;trying-out-the-model&#34;&gt;Trying out the model&lt;/h2&gt;

&lt;p&gt;I will use 50 real names taken from
&lt;a href=&#34;http://listofrandomnames.com&#34; target=&#34;_blank&#34;&gt;the list of random names&lt;/a&gt; website, which you
can find &lt;a href=&#34;https://matbesancon.github.io/text/names.txt&#34;&gt;here&lt;/a&gt;.
The problem becomes large enough to be interesting, but reasonable enough for
a decent laptop. If you want to invite 4 of these people and get the most
different names, Christian, Elizbeth, Beulah and Wilhelmina are the ones you
are looking for.&lt;/p&gt;

&lt;h2 id=&#34;bonus-and-random-ideas&#34;&gt;Bonus and random ideas&lt;/h2&gt;

&lt;p&gt;It is computationally too demanding for now, but it would be interesting
to see how the total sum of distances evolves as you add more people.&lt;/p&gt;

&lt;p&gt;Also, we are using the sum of distances as an objective to maximize.
One interesting alternative would be to maximize the smallest distance between
any two nodes in the subset. This changes the model, since we need to encode
the smallest distance using constraints. We will use an indicator constraint
to represent this:&lt;/p&gt;

&lt;p&gt;$$\max_{x,y} d $$
subject to:
$$ y_{ij} \Rightarrow d \leq c_{ij} \,\, \forall (i,j) \in E$$
$$ 2y_{ij} \leq x_i + x_j \forall (i,j) \in E $$
$$ \sum_{(i,j) \in E} y_{ij} = k\cdot (k-1) $$&lt;/p&gt;

&lt;p&gt;Depending on the solver support, the indicator constraint can be modelled directly,
with big M or SOS1 constraints. This remains harder than the initial model.&lt;/p&gt;

&lt;p&gt;Special thanks to Yuan for bringing out the discussion which led to this
post, and to BYP for the feedback.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;sources&#34;&gt;Sources&lt;/h1&gt;

&lt;p&gt;[1] Alidaee, Bahram, et al. &amp;ldquo;Solving the maximum edge weight clique problem via unconstrained quadratic  programming.&amp;rdquo; European Journal of Operational Research 181.2 (2007): 592-597.&lt;/p&gt;

&lt;p&gt;[2] Park, Kyungchul, Kyungsik Lee, and Sungsoo Park. &amp;ldquo;An extended formulation approach to the edge-weighted maximal clique problem.&amp;rdquo; European Journal of Operational Research 95.3 (1996): 671-682.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Static lists in Julia</title>
      <link>https://matbesancon.github.io/post/2019-03-30-static-list/</link>
      <pubDate>Sat, 30 Mar 2019 00:00:00 +0100</pubDate>
      
      <guid>https://matbesancon.github.io/post/2019-03-30-static-list/</guid>
      <description>

&lt;hr /&gt;

&lt;p&gt;This post explores the possibility to build static lists in Julia, meaning
lists for which the size is known at compile-time. This is inspired by
a &lt;a href=&#34;https://aerodatablog.wordpress.com/2019/03/03/a-typedlist-in-scala/#joe_barnes_talk&#34; target=&#34;_blank&#34;&gt;post&lt;/a&gt;
on a Scala equivalent but will take different roads to see more than a plain port.
Of course, this implementation is not that handy nor efficient but
is mostly meant to push the limits of the type system,
especially a trick of using recursive types as values
(replacing a dependent type system).
Some other references:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The list operations are inspired by the implementation in &lt;a href=&#34;https://github.com/JuliaCollections/DataStructures.jl&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;DataStructures.jl&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/JuliaArrays/StaticArrays.jl&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;StaticArrays.jl&lt;/em&gt;&lt;/a&gt; is a good inspiration for static data structures in Julia&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;/p&gt;

&lt;h1 id=&#34;first-thoughts-value-type-parameter&#34;&gt;First thoughts: value type parameter&lt;/h1&gt;

&lt;p&gt;Julia allows developers to define type parameters.
In the case of a list, the most obvious one may be the
type of data it contains:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; MyList{T} &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Some types are however parametrized on other things, if we look at the
definition of &lt;code&gt;AbstractArray&lt;/code&gt; for example:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  AbstractArray{T,N}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Supertype for N-dimensional arrays (or array-like types) with elements of type T.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The two type parameters are another type &lt;code&gt;T&lt;/code&gt; and integer &lt;code&gt;N&lt;/code&gt; for the
dimensionality (tensor rank). The only constraint for a value to be
an acceptable type parameter is to be composed of plain bits, complying
with &lt;code&gt;isbitstype&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This looks great, we could define our StaticList
directly using integers.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;A static list of type `T` and length `L`
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; StaticList{T,L} &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; Nil{T} &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt; StaticList{T,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

StaticList{T}() where T &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Nil{T}()
StaticList(v&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;T) where T &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cons(v, Nil{T}())

&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; Cons{T,L} &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt; StaticList{T,L&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}
    h&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;T
    t&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticList{T,L}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; Cons(v&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;T, t&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticList{T,L}) where {T,L}
        new{T,L}(v,t)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Usage:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Cons(3, Nil{Int}()) is of type StaticList{Int,1}&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Cons(4, Cons(3, Nil{Int}())) is of type StaticList{Int,2}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you try to evaluate this code, you will get an error:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;ERROR&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MethodError&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; no method matching &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;TypeVar&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Int64&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Pretty explicit, you cannot perform any computation on values used as type
parameters. With more complex operations, this could make the compiler hang,
crash or at least perform poorly (we would be forcing the compiler to execute
this code at compile-time).&lt;/p&gt;

&lt;p&gt;One way there might be around this is macros or replacing sub-typing with
another mechanism. For the macro-based approach,
&lt;a href=&#34;https://github.com/vtjnash/ComputedFieldTypes.jl&#34; target=&#34;_blank&#34;&gt;ComputedFieldTypes.jl&lt;/a&gt;
does exactly that. More discussion on computed type parameters in
[1] and [2].&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;: using integer type parameters can be achieved using &lt;em&gt;ComputedFieldTypes.jl&lt;/em&gt; as such:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;julia&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; ComputedFieldTypes

julia&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; StaticList{T,L} &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

julia&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; Nil{T} &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt; StaticList{T,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

julia&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;@computed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; Cons{T,L} &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt; StaticList{T,L}
           h&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;T
           t&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticList{T,L&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}
           &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; Cons(v&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;T, t&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticList{T,L0}) where {T,L0}
               L &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L0&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
               new{T,L}(v,t)
           &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

julia&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Cons(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, Nil{&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;}())
Cons{&lt;span style=&#34;color:#66d9ef&#34;&gt;Int64&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;}(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, Nil{&lt;span style=&#34;color:#66d9ef&#34;&gt;Int64&lt;/span&gt;}())

julia&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Cons(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, Cons(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, Nil{&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;}()))
Cons{&lt;span style=&#34;color:#66d9ef&#34;&gt;Int64&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, Cons{&lt;span style=&#34;color:#66d9ef&#34;&gt;Int64&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;}(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, Nil{&lt;span style=&#34;color:#66d9ef&#34;&gt;Int64&lt;/span&gt;}()))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This might be the neatest option for building the &lt;code&gt;StaticList&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;recursive-natural-numbers&#34;&gt;Recursive natural numbers&lt;/h1&gt;

&lt;p&gt;We can use the same technique as in the Scala post, representing natural
number using recursive types.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ZeroLength&lt;/code&gt; is a special singleton type&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Next{L}&lt;/code&gt; represents the number following the one represented by &lt;code&gt;L&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can modify our previous example:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;A type parameter for List length, the numerical length can be retrieved
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;using `length(l::Length)`
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; Length &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; ZeroLength &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt; Length &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; Next{L&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt;Length} &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt; Length &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;A linked list of size known at compile-time
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; StaticList{T,L&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt;Length} &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; Nil{T} &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt; StaticList{T,ZeroLength} &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

StaticList{T}() where T &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Nil{T}()
StaticList(v&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;T) where T &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cons(v, Nil{T}())

&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; Cons{T,L&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt;Length} &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt; StaticList{T,Next{L}}
    h&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;T
    t&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticList{T,L}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; Cons(v&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;T, t&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticList{T,L}) where {T,L&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt;Length}
        new{T,L}(v,t)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;By default, the type of the Nil is ignored if different
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;from the type of first value
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
Cons(v&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;T,&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;{Nil{T1}}) where {T,T1} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cons(v, Nil{T}())&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;We can then define basic information for a list, its length:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;Base&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;length(&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;{ZeroLength}) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
Base&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;length(&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;{Next{L}}) where {L} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; length(L)

Base&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eltype(&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticList{T,L}) where {T,L} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T
Base&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;length(l&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticList{T,L}) where {T,L} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; length(L)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One thing should catch your attention in this block,
we use a recursive definition of &lt;code&gt;length&lt;/code&gt; for the &lt;code&gt;Length&lt;/code&gt; type,
which means we can blow our compiler. However, both of the definitions
are static, in the sense that they don&amp;rsquo;t use type information, so
the final call should reduce to spitting out the length cached at compile-time.
You can confirm this is the case by checking the produced assembly instructions with &lt;code&gt;@code_native&lt;/code&gt;.
We respected our contract of a list with size known at compile-time.&lt;/p&gt;

&lt;h1 id=&#34;implementing-a-list-y-behaviour&#34;&gt;Implementing a list-y behaviour&lt;/h1&gt;

&lt;p&gt;This part is heavily inspired by the &lt;em&gt;DataStructures.jl&lt;/em&gt; list implementation,
as such we will not re-define methods with semantically similar but
implement them for our list type. Doing so for your own package
allows user to switch implementation for the same generic code.&lt;/p&gt;

&lt;p&gt;The first operation is being able to join a head with an existing list:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;DataStructures&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cons(v&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;T,l&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticList{T,L}) where {T,L} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cons(v,l)

&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Allows for `cons(v,Nil)`. Note that the `Nil` type is ignored.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
DataStructures&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cons(v&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;T,&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;{Nil}) where {T} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StaticList(v)

(&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Colon&lt;/span&gt;)(v&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;T,l&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticList{T,L}) where {T,L} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DataStructures&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cons(v, l)
(&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Colon&lt;/span&gt;)(v&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;T,&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;{Nil}) where {T,L} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DataStructures&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cons(v, Nil{T})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Implementing the odd &lt;code&gt;::Colon&lt;/code&gt; methods allows for a very neat syntax:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;l0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StaticList{&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;}()
l1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;l0
l2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;l1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Unlike the Scala post, we are not using the &lt;code&gt;::&lt;/code&gt; operator which
is reserved for typing expressions in Julia.
We can add a basic head and tail methods, which allow querying
list elements without touching the inner structure. This
will be useful later on.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;DataStructures&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(l&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Cons{T,L}) where {T,L} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;h
DataStructures&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tail(l&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Cons{T,L}) where {T,L} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Testing list equality can be done recursively, dispatching on the three
possible cases:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;(l1&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticList, l2&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticList) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;(l1&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;L1,l2&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;L2) where {T1,L,T2,L1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt;Cons{T1,L},L2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt;Cons{T2,L}}
    l1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;h &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; l2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; l1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; l2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Two `Nil` are always considered equal, no matter the type
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Nil,&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Nil) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can now define basic higher-order functions, such as &lt;code&gt;zip&lt;/code&gt; below,
and implement the iteration interface.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; Base&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zip(l1&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Nil{T1},l2&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticList{T2,L2}) where {T1,T2,L2}
    Nil{&lt;span style=&#34;color:#66d9ef&#34;&gt;Tuple&lt;/span&gt;{T1,T2}}
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; Base&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zip(l1&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Cons{T1,L1},l2&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Cons{T2,L2}) where {T1,L1,T2,L2}
    v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (l1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;h, l2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;h)
    Cons(v,zip(l1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t,l2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t))
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

Base&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iterate(l&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticList, &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Nil) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nothing
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; Base&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iterate(l&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticList, state&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Cons &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; l)
    (state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;h, state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t)
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Iterating over our lists is fairly straight-forward, and will be more efficient than
the recursive implementations of the higher-order functions, we still kept it for
equality checking, more a matter of keeping a functional style in line with the Scala post.&lt;/p&gt;

&lt;p&gt;The case of list reversal is fairly straightforward: iterate and accumulate
the list in a new one.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; Base&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reverse(l&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticList{T,L}) where {T,L}
    l2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Nil{T}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; l
        l2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cons(h, l2)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    l2
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We define the cat operation between multiple lists.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; Base&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cat(l1&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticList{T,L},l2&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StaticList{T,L}) where {T,L}
    l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; l2
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; e &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; reverse(l1)
        l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cons(e, l)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    l
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The reverse is necessary to keep the order of the two lists.&lt;/p&gt;

&lt;h1 id=&#34;special-valued-lists&#34;&gt;Special-valued lists&lt;/h1&gt;

&lt;p&gt;Now that we have a basic static list implementation, we can spice things up.
&lt;code&gt;StaticList&lt;/code&gt; is just an abstract type in our case, not an algebraic data type
as in common functional implementations, meaning we can define other sub-types.&lt;/p&gt;

&lt;p&gt;Imagine a numeric list, with a series of zeros or ones somewhere.
Instead of storing all of them, we can find a smart way of representing them.
Let us define a static list of ones:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; OnesStaticList{T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Number&lt;/span&gt;,L&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt;Length} &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

Base&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iterate(l&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;OnesStaticList, &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;{ZeroLength}) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nothing
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; Base&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iterate(l&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;OnesStaticList{T,L}, state&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;{Next{L1}} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L) where &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;
    (one(T), L1)
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This list corresponds to the 1 value of type &lt;code&gt;T&lt;/code&gt;, repeated for all elements.
In a similar fashion, one can define a ZeroList:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; ZerosStaticList{T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Number&lt;/span&gt;,L&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt;Length} &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

Base&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iterate(l&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ZerosStaticList, &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;{ZeroLength}) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nothing
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; Base&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iterate(l&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ZerosStaticList{T,L}, state&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;{Next{L1}} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L) where&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;
    (zero(T), L1)
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One thing to note is that these lists are terminal, in the sense that they cannot
be part of a greater list. To fix this, we can add a tail to these as follows:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; ZerosStaticList{T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Number&lt;/span&gt;,L&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt;Length,TL&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt;StaticList{T,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt;Length}}
	t&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;TL
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

Base&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iterate(l&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ZerosStaticList, &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;{ZeroLength}) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; Base&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iterate(l&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ZerosStaticList{T,L}, state&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;{Next{L1}} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L) where&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;
    (zero(T), L1)
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;t&lt;/code&gt; field of the list contains the tail after the series of zeros,
we can thus build a much simpler representation in case of long constant series.
In a similar fashion, one could define a constant list of &lt;code&gt;N&lt;/code&gt; elements, storing
the value just once.&lt;/p&gt;

&lt;h1 id=&#34;multi-typed-lists&#34;&gt;Multi-typed lists&lt;/h1&gt;

&lt;p&gt;There is one last extension we can think of with this data structure.
Since we have a recursive length parameter, why not add it a type at each new node?&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; TLength &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; TZeroLength &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt; TLength &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; TNext{T,L&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt;TLength} &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt; TLength &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; TStaticList{L&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt;TLength} &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; TNil &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt; TStaticList{TZeroLength} &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; TCons{T, L&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt;TLength} &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt; TStaticList{TNext{T,L}}
    h&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;T
    t&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;TStaticList{L}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; TCons(v&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;T, t&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;TStaticList{L}) where {T,L&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt;TLength}
        new{T,L}(v,t)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With such construct, all nodes can be of a different type &lt;code&gt;T&lt;/code&gt;, without
removing the type information from the compiler.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;julia&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; TCons(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,TNil())
TCons{&lt;span style=&#34;color:#66d9ef&#34;&gt;Int64&lt;/span&gt;,TZeroLength}(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, TNil())

julia&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; TCons(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ha&amp;#34;&lt;/span&gt;, TCons(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,TNil()))
TCons{String,TNext{&lt;span style=&#34;color:#66d9ef&#34;&gt;Int64&lt;/span&gt;,TZeroLength}}(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ha&amp;#34;&lt;/span&gt;, TCons{&lt;span style=&#34;color:#66d9ef&#34;&gt;Int64&lt;/span&gt;,TZeroLength}(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, TNil()))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One interesting thing to note here is that the type takes the same
structure as the list itself:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Type&lt;/strong&gt;: either a &lt;code&gt;T&lt;/code&gt; and a &lt;code&gt;TLength&lt;/code&gt; containing the rest of the type, or &lt;code&gt;TNil&lt;/code&gt;&lt;br /&gt;
&lt;strong&gt;Data&lt;/strong&gt;: either a value of a given type and the rest of the list, or empty list&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;The Julia type system and compiler allow for sophisticated specifications
when designing data structures, which gives it a feel of compiled languages.
This however should not be abused, in our little toy example, the type parameter
grows in complexity as the list does, which means the compiler has to carry out
some computation.&lt;/p&gt;

&lt;p&gt;If you want some further compile-time tricks, &lt;a href=&#34;https://www.youtube.com/watch?v=SeqAQHKLNj4&#34; target=&#34;_blank&#34;&gt;Andy Ferris&amp;rsquo;s&lt;/a&gt;
workshop at JuliaCon 2018 details how to perform compile-time computations
between bits and then bytes.&lt;/p&gt;

&lt;p&gt;If you have any idea how to implement &lt;code&gt;StaticList&lt;/code&gt; using integer parameters instead
of custom struct I would be glad to exchange. Porting this to
use &lt;a href=&#34;https://github.com/vtjnash/ComputedFieldTypes.jl&#34; target=&#34;_blank&#34;&gt;ComputedFieldTypes.jl&lt;/a&gt; might be a fun
experiment.&lt;/p&gt;

&lt;p&gt;Feel free to reach out any way you prefer, &lt;a href=&#34;https://twitter.com/matbesancon&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt;,
&lt;a href=&#34;https://matbesancon.github.io/#contact&#34;&gt;email&lt;/a&gt; to exchange or discuss this post.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;sources&#34;&gt;Sources&lt;/h1&gt;

&lt;p&gt;Header image source: &lt;a href=&#34;https://pxhere.com/en/photo/742575&#34; target=&#34;_blank&#34;&gt;https://pxhere.com/en/photo/742575&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[1] A proposal on Julia &amp;ldquo;Defer calculation of field types until type parameters are known&amp;rdquo;, &lt;a href=&#34;https://github.com/JuliaLang/julia/issues/18466&#34; target=&#34;_blank&#34;&gt;julia/issues/18466&lt;/a&gt;&lt;br /&gt;
[2] Discussion on compile-time computations on &lt;a href=&#34;https://discourse.julialang.org/t/compile-time-arithmetic-for-parameterized-types/13991&#34; target=&#34;_blank&#34;&gt;Discourse&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Book review: the Entrepreneurial State</title>
      <link>https://matbesancon.github.io/post/2019-01-24-entrepreneurial-state-review/</link>
      <pubDate>Mon, 18 Mar 2019 00:00:00 +0100</pubDate>
      
      <guid>https://matbesancon.github.io/post/2019-01-24-entrepreneurial-state-review/</guid>
      <description>

&lt;hr /&gt;

&lt;p&gt;While reading books, lots of thoughts come and go, especially if the subject
resonates and is connected to topics of interest. If the book is a
novel or other fiction, I try to keep these thoughts away to remain in the
universe and story. For non-fiction though, some of these thoughts constitute
valuable elements to put on a larger frame, with other publications, slowly building
context for the topics at hand. The &lt;strong&gt;Entrepreneurial State&lt;/strong&gt;, by
Mariana Mazzucato, definitely has some elements to put on a larger frame
of economic policy, economics, on the perceived and actual role of the state
and its institutions.&lt;/p&gt;

&lt;h2 id=&#34;changing-the-narrative&#34;&gt;Changing the narrative&lt;/h2&gt;

&lt;p&gt;The main point and argument of the book is brilliant: re-trace the facts
about the development of some technologies, companies, industries to challenge
the established, implicit or explicit narrative about the state&amp;rsquo;s role.
In that case, the narrative is the sacred effect of the market and individual
entrepreneurs for building today&amp;rsquo;s greatest achievements.&lt;/p&gt;

&lt;h2 id=&#34;the-unexpected-hr-argument&#34;&gt;The unexpected HR argument&lt;/h2&gt;

&lt;p&gt;One point I never thought about before reading the book is the talent pool each
side is taking from. While keeping the sexy part of the narrative, the private
firms will always attract the best talents. For sure, some people will join
public services for the greater good, but some necessary talents might not
join because they have major criteria on what to achieve.&lt;/p&gt;

&lt;p&gt;If the narrative is that public institutions are there simply for controlling
and punctually fixing the economy, lots of talents will be driven by private
firms able to offer them to actually accomplish things and move forward.
If the State is now seen as the voice setting the direction for the coming
years and the rules to get there before letting the children out on the
playground, people working in the &amp;ldquo;development department&amp;rdquo; as Mazzucato calls
it play a part in a strategic role they would not have in the firms themselves.&lt;/p&gt;

&lt;p&gt;If you think about it, the only public servants glorified and pictured with
cool jobs in today&amp;rsquo;s representation are linked to the military or police.
Think of recent corporate series you&amp;rsquo;ve seen, public servants are always those
envious ones who didn&amp;rsquo;t have the courage to take the risky path.&lt;/p&gt;

&lt;h2 id=&#34;oh-no-apple-again&#34;&gt;Oh no, Apple again&lt;/h2&gt;

&lt;p&gt;To add some context, the first edition of the book was out in 2013. If I
try to remember the ambient perception, tech was not yet the evil eating the
world, building a startup was still freaking your parents out
(at least if you lived in France), Bitcoin was still nerds&amp;rsquo; or drugs money.
And Apple was still in the general opinion the cool company building slick products.
A chapter of the book is specifically dedicated to the company and how it has
been helped by the US federal and state governments at various stages and for
various steps of its rise. The narrative the author sets is that &lt;strong&gt;even&lt;/strong&gt; the
most innovative, &amp;ldquo;entrepreneurial&amp;rdquo;, garage-born companies got helped by the
government all the way through, whatever version of it is told by them,
the media or VCs. Still, this is a personal touch, but Apple has never been
fascinating, nor have I admired the firm more than others, or had this &amp;ldquo;wow&amp;rdquo;
effect to friends getting jobs there. It&amp;rsquo;s still a consumer firm building
expensive toys, not solving the world&amp;rsquo;s problem. The problem with this chapter
is that I agreed with the author&amp;rsquo;s underlying point before even starting it,
so the content I read felt mostly like a bunch of historical facts on a company
I am not that interested in.&lt;/p&gt;

&lt;h2 id=&#34;changing-energy-systems&#34;&gt;Changing energy systems&lt;/h2&gt;

&lt;p&gt;Currently involved in a PhD involving thinking new decision processes for power
grids, I naturally got thrilled to see a chapter on renewable generation
and green business. The author mentions the parallel and applications of
IT to these new challenges, with the nice mention of
&lt;em&gt;&amp;ldquo;throwing software at the problem&amp;rdquo;&lt;/em&gt; [1], referring to designing algorithms
to cope with solar and wind power intermittency.
In that case, it is indeed necessary but not sufficient. Software will at
most bring information within reach of the agents needing it at the right time.
This availability is only a prerequisite for enabling better decision-making in power systems,
creating value shared between the different levels contributing to the
various improvements. See recent work in journals such as IEEE Transactions on
Power Systems / on Smart Grids, the hard problems are not data collection or
transmission but making decision under various types of constraints.
Nonetheless, it was a nice surprise to read an economist&amp;rsquo;s view, summary
and prediction for smart grids, with mentions of programs such as demand response.&lt;/p&gt;

&lt;h2 id=&#34;the-danger-of-the-strawman&#34;&gt;The danger of the strawman&lt;/h2&gt;

&lt;p&gt;This might be one central critic to the book, from an argument construction
perspective. The whole stream of thought is built around a de- and reconstruction
of the role of the State for major innovations, past and present. There is
however the continuous danger of a &lt;a href=&#34;https://en.wikipedia.org/wiki/Straw_man&#34; target=&#34;_blank&#34;&gt;strawman argument&lt;/a&gt;,
the detractors of the role of the states are often described as &amp;ldquo;they&amp;rdquo;, and
referred to vaguely compared to other topics for which the author provides
numerous references. In comparison, re-using the same article from
&lt;a href=&#34;https://www.economist.com/leaders/2012/04/21/the-third-industrial-revolution&#34; target=&#34;_blank&#34;&gt;the Economist&lt;/a&gt;
for the other side of the argument seems like an unfair trial.&lt;/p&gt;

&lt;h2 id=&#34;going-further-other-critical-angles&#34;&gt;Going further, other critical angles&lt;/h2&gt;

&lt;p&gt;If you have one take-away from this post, the book is worth reading in depth
and thinking over. It strikes a nice balance between the academic rigour,
providing plenty of references to go further on different topics and developing
arguments with care, while staying pleasant to read before going to bed, during
your commute or with your favourite cup of Earl Grey.&lt;/p&gt;

&lt;p&gt;Not being an economist, I will not go far in comparison to other schools of
thought on industrial and innovation policies.
Feel free to check &lt;a href=&#34;https://www.forbes.com/sites/timworstall/2013/12/15/the-intellectual-hole-at-the-heart-of-mariana-mazzucatos-entrepreneurial-state/#6042744d728b&#34; target=&#34;_blank&#34;&gt;those&lt;/a&gt;
&lt;a href=&#34;https://www.questia.com/library/journal/1G1-432806536/a-critique-of-mazzucato-s-entrepreneurial-state&#34; target=&#34;_blank&#34;&gt;other&lt;/a&gt;
articles shedding another light on the ideas developed in the book for critical
points of view but mostly
&lt;a href=&#34;https://salon.thefamily.co/innovation-doesnt-run-on-calls-for-projects-4f878ca8e31&#34; target=&#34;_blank&#34;&gt;this&lt;/a&gt;
excellent summary and analysis by Nicolas Colin, whose book
&lt;a href=&#34;https://twitter.com/Nicolas_Colin/status/1014439870524215302&#34; target=&#34;_blank&#34;&gt;Hedge&lt;/a&gt; is next
on my reading list.&lt;/p&gt;

&lt;p&gt;Feel free to reach out any way you prefer, &lt;a href=&#34;https://twitter.com/matbesancon&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt;,
&lt;a href=&#34;https://matbesancon.github.io/#contact&#34;&gt;email&lt;/a&gt; to exchange or discuss the book or this post.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;sources&#34;&gt;Sources&lt;/h2&gt;

&lt;p&gt;[1] &amp;ldquo;Powering the Dream: The History and Promise of Green Technology&amp;rdquo; Madrigal, 2011&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Multiple dispatch - an example for mathematical optimizers</title>
      <link>https://matbesancon.github.io/post/2019-02-24-multiple-dispatch-optimizers/</link>
      <pubDate>Sun, 24 Feb 2019 00:00:00 +0100</pubDate>
      
      <guid>https://matbesancon.github.io/post/2019-02-24-multiple-dispatch-optimizers/</guid>
      <description>

&lt;p&gt;In a recent pull request on a personal project, I spent some time designing
an intuitive API for a specific problem. After reaching a satisfying result,
I realized this would never have been possible without one of the central
mechanisms of the Julia language: &lt;strong&gt;multiple dispatch&lt;/strong&gt;. Feel free to read the
&lt;a href=&#34;https://docs.julialang.org/en/v1/manual/methods/&#34; target=&#34;_blank&#34;&gt;Julia docs&lt;/a&gt; on the topic
or what &lt;a href=&#34;https://en.wikipedia.org/wiki/Multiple_dispatch&#34; target=&#34;_blank&#34;&gt;Wikipedia&lt;/a&gt; has to say
about it.&lt;/p&gt;

&lt;p&gt;This post is a walkthrough for multiple dispatch for a case in mathematical
optimization. The first part will introduce the problem context and requires
some notion in mathematical optimization, if this stuff is scary, feel free to
skip to the rest directly.&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;/p&gt;

&lt;h1 id=&#34;refresher-on-if-then-else-constraints&#34;&gt;Refresher on if-then-else constraints&lt;/h1&gt;

&lt;p&gt;I promised an example oriented towards mathematical optimization, here it is:
it is common to model constraints with two variables $(x, y)$,
$x$ continuous and $y$ binary stating:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$y = 0 \Rightarrow x = 0$&lt;/li&gt;
&lt;li&gt;If $y = 1$, there is no specific constraint on $x$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some examples of models with such constraint:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Facility location&lt;/strong&gt;: if a wharehouse is not opened, $y = 0$, then the quantity
served by this point has to be $x = 0$, otherwise, the quantity can go up to
the wharehouse capacity.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unit commitment&lt;/strong&gt; (a classic problem for power systems): if a power plant
has not been activated for a given hour, then it cannot supply any power,
otherwise, it can supply up to its capacity.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Complementarity constraints&lt;/strong&gt;: if a dual variable $\lambda$ is 0,
then the corresponding constraint is not active (in non-degenerate cases,
the slack variable is non-zero)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Logical constraints with such if-then-else structure cannot be handled by
established optimization solvers, at least not in an efficient way. There are
two usual ways to implement this, &amp;ldquo;big-M&amp;rdquo; type constraints and special-ordered
sets of type 1 &lt;code&gt;SOS1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A SOS1 constraint specifies that out of a set of variables or expressions,
at most one of them can be non-zero. In our case, the if-then-else constraint
can be modeled as:
$$SOS1(x,\, 1-y)$$&lt;/p&gt;

&lt;p&gt;Most solvers handling integer variables can use these $SOS1$ constraints
within a branch-and-bound procedure.&lt;/p&gt;

&lt;p&gt;The other formulation is using an upper-bound on the $x$ variable, usually
written $M$, hence the name:&lt;/p&gt;

&lt;p&gt;$$x \leq M \cdot y $$&lt;/p&gt;

&lt;p&gt;If $y=0$, $x$ can be at most 0, otherwise it is bounded by $M$. If $M$
is sufficiently big, the constraint becomes inactive.
However, smaller $M$ values yield tighter formulations, solved more efficiently.
See &lt;a href=&#34;https://orinanobworld.blogspot.com/2018/09/choosing-big-m-values.html&#34; target=&#34;_blank&#34;&gt;Paul Rubin&amp;rsquo;s&lt;/a&gt;
detailed blog post on the subject. If we want bounds as tight as possible, it
is always preferable to choose one bound per constraint, instead of one unique
$M$ for them all, which means we need a majorant of all individual $M$.&lt;/p&gt;

&lt;p&gt;As a rule of thumb, big-M constraints are pretty efficient if $M$ is tight,
but if we have no idea about it, SOS1 constraints may be more interesting,
see [1] for recent numerical experiments applied to bilevel problems.&lt;/p&gt;

&lt;h1 id=&#34;modeling-if-then-else-constraints&#34;&gt;Modeling if-then-else constraints&lt;/h1&gt;

&lt;p&gt;Now that the context is set, our task is to model if-then-else constraints
in the best possible way, in a modeling package for instance. We want the user
to specify something as:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; handle_ifthenelse(x, y, method, params)
    &lt;span style=&#34;color:#75715e&#34;&gt;# build the constraint with method using params&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Without a dispatch feature baked within the language, we will end up doing
it ourselves, for instance in:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; handle_ifthenelse(x, y, method, params)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; typeof(method) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; SOS1Method
        &lt;span style=&#34;color:#75715e&#34;&gt;# model as SOS1Method&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; typeof(method) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; BigMMethod
        &lt;span style=&#34;color:#75715e&#34;&gt;# handle as big M with params&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
        throw(&lt;span style=&#34;color:#66d9ef&#34;&gt;MethodError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Method unknown&amp;#34;&lt;/span&gt;))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;NB: if you have to do that in Julia, there is a &lt;code&gt;isa(x, T)&lt;/code&gt; function
verifying if &lt;code&gt;x&lt;/code&gt; is a &lt;code&gt;T&lt;/code&gt; in a more concise way, this is verifying sub-typing
instead of type equality, which is much more flexible.&lt;/p&gt;

&lt;p&gt;The function is way longer than necessary, and will have to be modified every
time. In a more idiomatic way, what we can do is:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; SOS1Method &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; BigMMethod &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; handle_ifthenelse(x, y, &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;SOS1Method)
    &lt;span style=&#34;color:#75715e&#34;&gt;# model as SOS1Method&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; handle_ifthenelse(x, y, &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;BigMMethod, params)
    &lt;span style=&#34;color:#75715e&#34;&gt;# handle as big M with params&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Much better here, three things to notice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This may look similar to pattern matching in function arguments if you are
familiar with languages as Elixir. However, the method to use can be determined
using static dispatch, i.e. at compile-time.&lt;/li&gt;
&lt;li&gt;We don&amp;rsquo;t need to carry around &lt;code&gt;params&lt;/code&gt; in the case of the SOS1 method,
since we don&amp;rsquo;t use them, so we can adapt the method signature to pass only
what is needed.&lt;/li&gt;
&lt;li&gt;This code is much easier to document, each method can be documented on
its own type, and the reader can refer to the method directly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cherry on top, any user can define their own technique by importing our function
and defining a new behavior:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; OtherPackage &lt;span style=&#34;color:#75715e&#34;&gt;# where the function is defined&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; MyNewMethod &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; handle_ifthenelse(x, y, &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MyNewMethod)
    &lt;span style=&#34;color:#75715e&#34;&gt;# define a new method for ifthenelse, much more efficient&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h1 id=&#34;handling-big-m-in-an-elegant-way&#34;&gt;Handling big M in an elegant way&lt;/h1&gt;

&lt;p&gt;We have seen how to dispatch on the technique, but still we are missing one
point: handling the &lt;code&gt;params&lt;/code&gt; in big-M formulations. If you have pairs of $(x_j,y_j)$,
then users may want:&lt;/p&gt;

&lt;p&gt;$$ x_j \leq M_j \cdot y_j\,\, \forall j $$&lt;/p&gt;

&lt;p&gt;Or:
$$ x_j \leq M \cdot y_j\,\, \forall j $$&lt;/p&gt;

&lt;p&gt;The first formulation requires a vector of M values, and the second one
requires a scalar. One default option would be to adapt to the most general one:
if several M values are given, build a vector, if there is only one, repeat it
for each $j$. One way to do it using dynamic typing:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; BigMMethod &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; handle_ifthenelse(x, y, &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;BigMMethod, M&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Union&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;Real&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;AbstractVector&lt;/span&gt;{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Real&lt;/span&gt;}})
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; M isa &lt;span style=&#34;color:#66d9ef&#34;&gt;Real&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# handle with one unique M&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# it is a vector&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# handle with each M[j]&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Note that we can constrain the type of M to be either a scalar or a Vector
using &lt;code&gt;Union&lt;/code&gt; type. Still, this type verification can be done using dispatch,
and we can handle the multiple cases:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; BigMMethod &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Use one unique big M value
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; handle_ifthenelse(x, y, &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;BigMMethod, M&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Real&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;# handle with one unique M&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Use a vector of big M value
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; handle_ifthenelse(x, y, &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;BigMMethod, Mvec&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;AbstractVector&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;# handle with each Mvec[j]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This solution is fine, and resolving most things at compile-time.
Also, note that we are defining one signature as a convenience way redirecting
to another.&lt;/p&gt;

&lt;h1 id=&#34;polishing-our-design-enriched-types&#34;&gt;Polishing our design: enriched types&lt;/h1&gt;

&lt;p&gt;The last solution is great, we are dispatching on our algorithm and parameter
types. However, in a realistic research or development work, many more
decisions are taken such as algorithms options, number types, various parameters.
We will likely end up with something similar to:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; do_science(x, y, z,
                    &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Alg1, params_alg_1,
                    &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Alg2, params_alg_2,
                    &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Alg3, &lt;span style=&#34;color:#75715e&#34;&gt;# algortithm 3 does not need parameters&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Alg4, params_alg_4)
    &lt;span style=&#34;color:#75715e&#34;&gt;# do something with params_alg_1 for Alg1&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# do something with params_alg_2 for Alg2&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Requiring users to pass all arguments and types in the correct order.
A long chain of positional arguments like this end makes for error-prone
and cumbersome interfaces. Can we change this? We created all our types as
empty structures &lt;code&gt;struct A end&lt;/code&gt; and use it just to dispatch. Instead,
we could store adapted parameters within the corresponding type:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; Alg1
    coefficient&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Float64&lt;/span&gt;
    direction&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Vector&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;Float64&lt;/span&gt;}
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# define other types&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; do_science(x, y, z, a1&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Alg1, a2&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Alg2, &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Alg3, a4&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Alg4)
    &lt;span style=&#34;color:#75715e&#34;&gt;# do something with params_alg_1 for Alg1&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# a1.coefficient, a1.direction...&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# do something with Alg2&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Getting back to our initial use case of &lt;code&gt;BigMMethod&lt;/code&gt;, we need to store
the $M$ value(s) in the structure:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; BigMMethod
    M&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Union&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;Float64&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Vector&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;Float64&lt;/span&gt;}}
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;This seems fine, however, the Julia compiler cannot know the type of the &lt;code&gt;M&lt;/code&gt;
field at compile-time, instead, we can use a type parameter here:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; BigMMethod{MT&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Union&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;Real&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;AbstractVector&lt;/span&gt;{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Real&lt;/span&gt;}}}
    M&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MT
    BigMMethod(M&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MT) where {MT} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new{MT}(M)
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;When constructing the BigMMethod with this definition, it can be specialized
on &lt;code&gt;MT&lt;/code&gt;, the type of &lt;code&gt;M&lt;/code&gt;, two examples of valid definitions are:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;BigMMethod(&lt;span style=&#34;color:#ae81ff&#34;&gt;3.0&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# result: BigMMethod{Float64}(3.0)&lt;/span&gt;

BigMMethod(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# result: BigMMethod{Int}(3)&lt;/span&gt;

BigMMethod([&lt;span style=&#34;color:#ae81ff&#34;&gt;3.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5.0&lt;/span&gt;])
&lt;span style=&#34;color:#75715e&#34;&gt;# result BigMMethod{Vector{Float64}}([3.0, 5.0])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;The advantage is we can now specialize the &lt;code&gt;handle_ifthenelse&lt;/code&gt;
signature on the type parameter of M, as below:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Use one unique big M value
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; handle_ifthenelse(x, y, bm&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;BigMMethod{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Real&lt;/span&gt;})
    &lt;span style=&#34;color:#75715e&#34;&gt;# handle with one unique M bm.M&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Use a vector of big M value
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; handle_ifthenelse(x, y, bm&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;BigMMethod{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;AbstractVector&lt;/span&gt;})
    &lt;span style=&#34;color:#75715e&#34;&gt;# handle with each bm.M[j]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The advantage is a strictly identical signature, whatever the method and
its parameters, users will always call it with:
&lt;code&gt;handle_ifthenelse(x, y, bm::BigMMethod{&amp;lt;:AbstractVector})&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;conclusion-avoiding-a-clarity-flexibility-trade-off&#34;&gt;Conclusion: avoiding a clarity-flexibility trade-off&lt;/h1&gt;

&lt;p&gt;In this simple but commonly encountered example, we leveraged multiple dispatch,
the ability to choose a function implementation depending on the type of its
arguments. This helped us define a homogeneous interface for specifying a type
of constraint, specializing on the method (SOS1 or big M) and on the data
available (one M or a vector of M values).&lt;/p&gt;

&lt;p&gt;Performance bonus, this design is providing the Julia compiler with strong type
information while remaining flexible for the user. In Julia terminology,
this property is called &lt;a href=&#34;https://docs.julialang.org/en/v1/manual/performance-tips/#Avoid-changing-the-type-of-a-variable-1&#34; target=&#34;_blank&#34;&gt;type stability&lt;/a&gt;.
We would not have benefitted from this property if we had used reflection-based
design (with &lt;code&gt;typeof()&lt;/code&gt; and &lt;code&gt;isa&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;This idea of using big-M as an example did not come up in the abstract but is
a simplification of the design used in the
&lt;a href=&#34;https://github.com/matbesancon/BilevelOptimization.jl&#34; target=&#34;_blank&#34;&gt;BilevelOptimization.jl&lt;/a&gt;
package. Remember I mentioned complementarity constraints, it is exactly this
use case.&lt;/p&gt;

&lt;p&gt;If you are interested in more examples of multiple dispatch and hands-on
use cases for the Julia type system, check out
&lt;a href=&#34;https://blog.moelf.xyz/real-world-example-for-julia-typing/&#34; target=&#34;_blank&#34;&gt;these&lt;/a&gt;
&lt;a href=&#34;https://white.ucc.asn.au/2018/10/03/Dispatch,-Traits-and-Metaprogramming-Over-Reflection.html&#34; target=&#34;_blank&#34;&gt;two&lt;/a&gt;
articles.
Feel free to reach out any way you prefer, &lt;a href=&#34;https://twitter.com/matbesancon&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt;,
&lt;a href=&#34;https://matbesancon.github.io/#contact&#34;&gt;email&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Edit 1: thanks BYP for sharp proofreading and constructive critics.&lt;/p&gt;

&lt;p&gt;Edit 2: Thanks Mathieu Tanneau for pointing out the alternative solution of
indicator constraints instead of big M, as documented in &lt;a href=&#34;http://www.gurobi.com/documentation/7.5/refman/constraints.html&#34; target=&#34;_blank&#34;&gt;Gurobi&lt;/a&gt;, &lt;a href=&#34;https://www.ibm.com/support/knowledgecenter/SSSA5P_12.8.0/ilog.odms.cplex.help/CPLEX/UsrMan/topics/discr_optim/indicator_constr/01_indicators_title_synopsis.html&#34; target=&#34;_blank&#34;&gt;CPLEX&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Edit 3: For more info on big M constraints and underlying issues, you can read
&lt;a href=&#34;https://twitter.com/thserra&#34; target=&#34;_blank&#34;&gt;Thiago Serra&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;https://thiagoserra.com/2017/06/15/big-m-good-in-practice-bad-in-theory-and-ugly-numerically/&#34; target=&#34;_blank&#34;&gt;post&lt;/a&gt;, which includes nice visualizations of the problem space.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Sources:&lt;/p&gt;

&lt;p&gt;[1] Henrik Carøe Bylling&amp;rsquo;s thesis, KU, &lt;a href=&#34;http://web.math.ku.dk/noter/filer/phd19hb.pdf&#34; target=&#34;_blank&#34;&gt;http://web.math.ku.dk/noter/filer/phd19hb.pdf&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A naive and incomplete guide to peer-review</title>
      <link>https://matbesancon.github.io/post/2019-02-04-article-review/</link>
      <pubDate>Mon, 04 Feb 2019 00:00:00 +0100</pubDate>
      
      <guid>https://matbesancon.github.io/post/2019-02-04-article-review/</guid>
      <description>

&lt;hr /&gt;

&lt;p&gt;After the first submissions to journals, most researchers will be contacted
by editors for reviewing articles others have written. It may seem like a
daunting task, evaluating the work someone else put several months to
prepare, code, write, correct and submit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: to preserve the anonymity of the reviews I made and am
making, all examples I give below are made up.&lt;/p&gt;

&lt;p&gt;The main phases of my reviewing process are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What is this about? Can I review it?&lt;/li&gt;
&lt;li&gt;Is the paper in the scope of the journal?&lt;/li&gt;
&lt;li&gt;Are there some topics I might struggle to understand?&lt;/li&gt;
&lt;li&gt;Diving in, a first pass to get the story right&lt;/li&gt;
&lt;li&gt;Thematic passes &amp;amp; writing the recommendations&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;what-is-this-about-can-i-review-it&#34;&gt;What is this about? Can I review it?&lt;/h2&gt;

&lt;p&gt;After receiving the invitation and getting the manuscript, my screening phase
consists in reading only these three elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Title&lt;/li&gt;
&lt;li&gt;Abstract&lt;/li&gt;
&lt;li&gt;Keywords&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At that point, I roughly know if it is relevant for both the journal and me
that I review it. If I feel way out of scope, I&amp;rsquo;ll reach out to the editor.
I will also quickly check the name of the authors to make sure I do not have
a conflict of interests with any of them, without looking them up on the
internet of course, the goal is to avoid bias if I know them at a personal level.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Since this only took a quick screening, it can be done in a day or two,
letting the editor know too late that you will not review increases
the time to publication which is bad for the author, the journal and scientific
publication in general.&lt;/p&gt;

&lt;h2 id=&#34;is-the-paper-in-the-scope-of-the-journal&#34;&gt;Is the paper in the scope of the journal?&lt;/h2&gt;

&lt;p&gt;At that point, I re-read the journal&amp;rsquo;s aim and scope and keep in mind the main
ideas. If I am not that familiar with it, I will also check titles and abstracts
of random papers in the last issues. This will help during the review if
there are some doubts on the manuscript being at the right spot.&lt;/p&gt;

&lt;h2 id=&#34;are-there-some-topics-i-might-struggle-to-understand&#34;&gt;Are there some topics I might struggle to understand?&lt;/h2&gt;

&lt;p&gt;If I have doubts on some parts of the method or context
and can identify them, I&amp;rsquo;ll search for foundational articles and reference
text books on the subject.&lt;/p&gt;

&lt;p&gt;In any case, it is predictable that not all reviewers of the paper cover
the same area of expertise, especially for multi-disciplinary
journals. Still, it is always better to be comfortable with all components.
Take a case in mathematical optimization, for instance a manuscript
tackling a problem in power systems, with a game theoretical aspect and
formulating a Semi-Definite Positive model solved using a bundle method.
I might be familiar with the application (power systems) and game-theoretical
considerations in such domain, but without being an expert in SDP and even less
bundle methods. This is not a reason to refuse the role of reviewer.&lt;/p&gt;

&lt;p&gt;However, not being proficient on a component can introduce a bias in the
review by putting the reviewer on the defensive:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;why do the authors need all this fuss with this thing I&amp;rsquo;ve never heard of,
why not the good all techniques like what I do&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;ve seen read different comments in reviews which looked a lot like this.
This is why it can be valuable to take some time to get more familiar
with shadow areas. Plus this makes reviewing a challenge and an excuse
to learn something new and connected to my area.&lt;/p&gt;

&lt;h2 id=&#34;diving-in-a-first-pass-to-get-the-story-right&#34;&gt;Diving in, a first pass to get the story right&lt;/h2&gt;

&lt;p&gt;At that point, I book at least two hours for a first read of the paper,
with a pen, a printed version and a notebook. I should eventually get a
tablet to take notes on the PDF instead of print-outs but for the moment,
the number of papers I am asked to review remains reasonable.
I read it through without interruptions (no phone, no open browser, no music
or music without lyrics), taking notes on the side on all things that cross
my mind.
Notes are of different types: small mistakes, remarkable points, key information
and the &amp;ldquo;interrogation queue&amp;rdquo;. This queue is inspired by developers&amp;rsquo; code review
and the most advanced metric found for it:
&lt;img src=&#34;https://matbesancon.github.io/img/posts/peer_review/wtfm.jpg&#34; alt=&#34;&#34; /&gt;
An element is added in the queue when something is missing for my
understanding here and has not been introduced upwards in the article.
An element is removed from the queue when an explanation for it appears
(so later in the article). Of course, any element remaining in the queue
at the end of the manuscript is a problem: it is never explained,
introduced properly. Two considerations play a role for the quality of
the paper for its ease of understanding:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How long is the queue at any point in the paper? Does it introduce too much cognitive load?&lt;/li&gt;
&lt;li&gt;How long is the distance between the appearance of an element in the queue? (the interrogation moment) and its removal (the aha moment)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The second point is easy to solve, just recommend introducing the concept
before the place in the text where the interrogation appeared.
The first point will require more work on the authors&amp;rsquo; side
to displace all explanations before the introduction of the concept/symbol,
reducing the overall cognitive load at any moment for the reader.&lt;/p&gt;

&lt;h2 id=&#34;thematic-read-writing-the-recommendations&#34;&gt;Thematic read &amp;amp; writing the recommendations&lt;/h2&gt;

&lt;p&gt;After the first reading round, I usually have some ideas about what are the key
axes of the review, I can start writing it up with all the small details
(typos, clumsy or vague phrasing, etc), all that is not on the structure nor on
the content. A good rule of thumb is that those minor corrections are limited
to few words in just one sentence.
After that, I write down different main axes, as for instance:
&amp;ldquo;this step of the methodology section is not detailed enough&amp;rdquo; and quote
either precise points in the text where the problem arises from and/or
recommendations for fixing it: &amp;ldquo;this or that would make the article to be reproducible&amp;rdquo;.
The deeper a problem is, the more discussion it brings, the goal is not to let
the authors stuck with a blind comment, see the following examples nobody likes reading:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Some steps in Section III seem incorrect&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;How much does it cost to the reviewer to point out where and why exactly?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;The authors did not manage to highlight a significant part of the literature&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On which topic? What is not covered? Do you mean the authors did not cite &lt;strong&gt;your&lt;/strong&gt; article?&lt;/p&gt;

&lt;p&gt;Only after these last points am I 100% certain of the final recommendation I
will give for the manuscript, the usual options are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;With the minor modifications recommended, the paper is good to be published in my opinion.&lt;/li&gt;
&lt;li&gt;Some required modifications are major, re-submit for another reviewing round.&lt;/li&gt;
&lt;li&gt;The issues raised during review are too central to fix during review rounds, the work needs a huge re-write.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After forming this opinion, if I am not too late on the deadline, I will
let myself some time off the review (a few days), and then come back to what
I wrote to be sure every comment can be understood and used by the authors to
improve the paper. Also, I want to be sure not to have written anything
too rash. Nobody wants to be &lt;a href=&#34;https://twitter.com/thirdreviewer&#34; target=&#34;_blank&#34;&gt;that&lt;/a&gt;
&lt;a href=&#34;https://twitter.com/YourPaperSucks&#34; target=&#34;_blank&#34;&gt;reviewer&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Even though peer review is considered a pillar of modern research, it has its
history, qualities and flaws, and is fundamentally made by human beings and
does not systematically reflect a universal truth; that should be kept in mind
at all time. Also, the scientific communities should keep challenging it by
making it evolve and experimenting &lt;a href=&#34;https://elifesciences.org/articles/36545&#34; target=&#34;_blank&#34;&gt;new ways&lt;/a&gt;
of &lt;a href=&#34;http://www.theoj.org/&#34; target=&#34;_blank&#34;&gt;carrying it out&lt;/a&gt;, addressing some key
&lt;a href=&#34;http://www.immpressmagazine.com/peer-review-is-broken/&#34; target=&#34;_blank&#34;&gt;flaws&lt;/a&gt;. Note that I do
not say the solutions presented in these articles are the ground truth,
all I am stating is that it is worth opening the discussion, which academia
is not doing much at the moment.&lt;/p&gt;

&lt;p&gt;Maybe you have other tips for reviewing papers, how do you improve your process?
Which points were too domain-dependent / idealistic? (I did warn it was a naive view)
Reach out any way you prefer, &lt;a href=&#34;https://twitter.com/matbesancon&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt;,
&lt;a href=&#34;https://matbesancon.github.io/#contact&#34;&gt;email&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;[1]
Source for the cover image:
&lt;em&gt;Journal des Savants&lt;/em&gt; or &lt;em&gt;Journal Des Sçavans&lt;/em&gt; in old French, considered the earliest scientific journal.
&lt;a href=&#34;https://jamesgray2.me/2016/09/06/le-journal-des-savants-1681-1699/&#34; target=&#34;_blank&#34;&gt;https://jamesgray2.me/2016/09/06/le-journal-des-savants-1681-1699/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Winter warm-up: toy models for heat exchangers</title>
      <link>https://matbesancon.github.io/post/2018-12-27-heat-exchanger/</link>
      <pubDate>Thu, 27 Dec 2018 00:00:00 +0100</pubDate>
      
      <guid>https://matbesancon.github.io/post/2018-12-27-heat-exchanger/</guid>
      <description>

&lt;p&gt;Enjoying the calm of the frozen eastern French countryside for the last week of 2018,
I was struck by nostalgia while reading a SIAM news article [1] on a
near-reversible heat exchange between two flows and decided to dust off my
thermodynamics books (especially [2]).&lt;/p&gt;

&lt;p&gt;Research in mathematical optimization was not the
obvious path I was on a couple years ago. The joint bachelor-master&amp;rsquo;s program
I followed in France was in process engineering, a discipline crossing
transfer phenomena (heat exchange, fluid mechanics, thermodynamics), control,
knowledge of the matter transformations at hand
(chemical, biochemical, nuclear reactions) and industrial engineering
(see note at the end of this page).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hypotheses&lt;/strong&gt; Throughout the article, we will use a set of flow hypotheses
which build up the core of our model for heat exchange.
These can seem odd but are pretty common in process engineering and
realistic in many applications.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The two flows advance in successive &amp;ldquo;layers&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Each layer has a homogeneous temperature; we therefore ignore boundary layer effects.&lt;/li&gt;
&lt;li&gt;Successive layers do not exchange matter nor heat. The rationale behind this
is that the temperature difference between fluids is significantly higher than between layers.&lt;/li&gt;
&lt;li&gt;Pressure losses in the exchanger does not release a significant heat compared to
the fluid heat exchange.&lt;/li&gt;
&lt;li&gt;The fluid and wall properties are constant with temperature.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;starting-simple-parallel-flow-heat-exchange&#34;&gt;Starting simple: parallel flow heat exchange&lt;/h2&gt;

&lt;p&gt;In this model, both flows enter the exchanger on the same side, one at a
hot temperature, the other at a cold temperature. Heat is exchanged along the
exchanger wall, proportional at any point to the difference in temperature
between the two fluids. We therefore study the evolution of two variables
$u_1(x)$ and $u_2(x)$ in an interval $x \in [0,L]$ with $L$ the length of
the exchanger.&lt;/p&gt;

&lt;p&gt;In any layer $[x, x + \delta x]$, the heat exchange is equal to:
$$\delta \dot{Q} = h \cdot (u_2(x) - u_1(x)) \cdot \delta x$$
with $h$ a coefficient depending on the wall heat exchange properties.&lt;/p&gt;

&lt;p&gt;Moreover, the variation in internal energy of the hot flow is equal to
$\delta \dot{Q}$ and is also expressed as:&lt;/p&gt;

&lt;p&gt;$$ c_2 \cdot \dot{m}_2 \cdot (u_2(x+\delta x) - u_2(x)) $$
$c_2$ is the calorific capacity of the hot flow and  $\dot{m}_2$ its
mass flow rate. The you can check that the given expression is a power.
The same expressions apply to the cold flow.
Let us first assume the following:&lt;/p&gt;

&lt;p&gt;$$c_2 \cdot \dot{m}_2 = c_1 \cdot \dot{m}_1$$&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; DifferentialEquations
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; DiffEq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DifferentialEquations
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Plots

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; parallel_exchanger(du,u,p,x)
    h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;# heat exchange coefficient&lt;/span&gt;
    Q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (u[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;u[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
    du[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Q
    du[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Q
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; parallel_solution(L, p)
    problem &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DiffEq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ODEProblem(
      parallel_exchanger, &lt;span style=&#34;color:#75715e&#34;&gt;# function describing the dynamics of the system&lt;/span&gt;
      u₀,                 &lt;span style=&#34;color:#75715e&#34;&gt;# initial conditions u0&lt;/span&gt;
      (&lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;, L),            &lt;span style=&#34;color:#75715e&#34;&gt;# region overwhich the solution is built, x ∈ [0,L]&lt;/span&gt;
      p,                  &lt;span style=&#34;color:#75715e&#34;&gt;# parameters, here the aggregated transfer constant h&lt;/span&gt;
    )
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; DiffEq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;solve(problem, DiffEq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Tsit5())
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

plot(parallel_solution([&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;50.0&lt;/span&gt;, (&lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;$$ u_1(x) = T_{eq} \cdot (1 - e^{-h\cdot x}) $$
$$ u_2(x) = (100 - T_{eq}) \cdot e^{-h\cdot x} + T_{eq} $$&lt;/p&gt;

&lt;p&gt;With $T_{eq}$ the limit temperature, trivially 50°C with equal flows.&lt;/p&gt;

&lt;p&gt;(Full disclaimer: I&amp;rsquo;m a bit rusty and had to double-check for errors)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://matbesancon.github.io/img/posts/heatex/parallel.svg&#34;&gt;&lt;/p&gt;

&lt;p&gt;This model is pretty simple, its performance is however low from
a practical perspective. First on the purpose itself, we can compute for two
fluids the equilibrium temperature. This temperature can be adjusted
by the ratio of two mass flow rates but will remain a weighted average.
Suppose the goal of the exchange is to heat the cold fluid, the necessary
mass flow $\dot{m}_2$ tends to $\infty$ as the targeted temperature tends to
$u_2(L)$, and this is independent of the performance of the heat exchanger
itself, represented by the coefficient $h$. Here is the extended model using
the flow rate ratio to adjust the temperature profiles:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; DifferentialEquations
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; DiffEq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DifferentialEquations

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ratio_exchanger(du,u,p,x)
    h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;# heat exchange coefficient&lt;/span&gt;
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;# ratio of mass flow rate 2 / mass flow rate 1&lt;/span&gt;
    Q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (u[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;u[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
    du[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Q
    du[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Q &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; r
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ratio_solution(u₀, L, p)
    problem &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DiffEq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ODEProblem(
      ratio_exchanger, &lt;span style=&#34;color:#75715e&#34;&gt;# function describing the dynamics of the system&lt;/span&gt;
      u₀,              &lt;span style=&#34;color:#75715e&#34;&gt;# initial conditions u0&lt;/span&gt;
      (&lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;, L),         &lt;span style=&#34;color:#75715e&#34;&gt;# region overwhich the solution is built, x ∈ [0,L]&lt;/span&gt;
      p,               &lt;span style=&#34;color:#75715e&#34;&gt;# parameters, here the aggregated transfer constant h&lt;/span&gt;
    )
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; DiffEq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;solve(problem, DiffEq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Tsit5())
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (idx,r) &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; enumerate((&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;500.0&lt;/span&gt;))
    plot(ratio_solution([&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;50.0&lt;/span&gt;, (&lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt;, r)))
    xlabel!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x (m)&amp;#34;&lt;/span&gt;)
    ylabel!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;T °C&amp;#34;&lt;/span&gt;)
    title!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parallel flow with ratio &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
    savefig(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;parallel_ratio_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;(idx)&lt;span style=&#34;color:#e6db74&#34;&gt;.pdf&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;https://matbesancon.github.io/img/posts/heatex/parallel_ratio_1.svg&#34;&gt;
&lt;img src=&#34;https://matbesancon.github.io/img/posts/heatex/parallel_ratio_2.svg&#34;&gt;
&lt;img src=&#34;https://matbesancon.github.io/img/posts/heatex/parallel_ratio_3.svg&#34;&gt;
&lt;img src=&#34;https://matbesancon.github.io/img/posts/heatex/parallel_ratio_4.svg&#34;&gt;&lt;/p&gt;

&lt;p&gt;This model has an analytical closed-form solution given by:
$$ T_{eq} = \frac{100\cdot \dot{m}_2}{\dot{m}_1 + \dot{m}_2} = 100\cdot\frac{r}{1+r} $$
$$ u_1(x) = T_{eq} \cdot (1 - e^{-h\cdot x}) $$
$$ u_2(x) = (100 - T_{eq}) \cdot e^{-h\cdot x \cdot r} + T_{eq} $$&lt;/p&gt;

&lt;h2 id=&#34;opposite-flow-model&#34;&gt;Opposite flow model&lt;/h2&gt;

&lt;p&gt;This model is trickier because we don&amp;rsquo;t consider the dynamics of the system
along one dimension anymore. The two fluids flowing in opposite directions
are two interdependent systems. We won&amp;rsquo;t go through the analytical solution
but use a similar discretization as in article [1].&lt;/p&gt;

&lt;p&gt;This model takes $n$ discrete cells, each considered at a given temperature.
Two cells of the cold and hot flows are considered to have exchanged heat
after crossing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://matbesancon.github.io/img/posts/heatex/counterflow.png&#34;&gt;
[3]&lt;/p&gt;

&lt;p&gt;Applying the energy conservation principle, the gain of internal energy
between cell $k$ and $k+1$ for the cold flow is equal to the loss of
internal energy of the hot flow from cell $k+1$ to cell $k$. These differences
come from heat exchanged, expressed as:&lt;/p&gt;

&lt;p&gt;$$\dot{Q}_k = h \cdot \Delta x \cdot (u_{2,k+1} - u_{1,k}) $$
$$\dot{Q}_k = \dot{m}_1 \cdot c_1 \cdot (u_{1,k+1} - u_{1,k}) $$
$$\dot{Q}_k = \dot{m}_2 \cdot c_2 \cdot (u_{2,k+1} - u_{2,k}) $$&lt;/p&gt;

&lt;p&gt;Watch out the sense of the last equation since the heat exchange is
a loss for the hot flow. Again we use the simplifying assumption of
equality of the quantities:
$$ \dot{m}_i \cdot c_i $$&lt;/p&gt;

&lt;p&gt;Our model only depends on the number of discretization steps $n$
and transfer coefficient $h$.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; discrete_crossing(n, h; itermax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50000&lt;/span&gt;)
    u1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Matrix&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;Float64&lt;/span&gt;}(undef, itermax, n)
    u2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Matrix&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;Float64&lt;/span&gt;}(undef, itermax, n)
    u1[&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;
    u1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;
    u2[&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;,n] &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;
    u2[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; iter &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;itermax
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            δq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (u2[iter&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, k&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; u1[iter&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, k]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;50.0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;n)
            u2[iter, k]   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; u2[iter&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, k&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; δq
            u1[iter, k&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; u1[iter&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, k]   &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; δq
        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    (u1,u2)
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; (a1, a2) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; discrete_crossing(&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; x0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;, length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;, stop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L)

p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plot(x0, a1[&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;], label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;u1 final&amp;#34;&lt;/span&gt;, legend &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;topleft)
plot!(p, x0, a2[&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;], label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;u2 final&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; iter &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; p
    plot!(p, x0, a1[iter,&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;], label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;u1 &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;(iter)&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
    plot!(p, x0, a2[iter,&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;], label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;u2 &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;(iter)&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
xlabel!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x (m)&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can observe the convergence of the solution at different iterations:
&lt;img src=&#34;https://matbesancon.github.io/img/posts/heatex/cross.svg&#34;&gt;&lt;/p&gt;

&lt;p&gt;After convergence, we observe a parallel temperature profiles along the
exchanger, the difference between the two flows at any point being reduced
to $\epsilon$ mentioned in article [1]. The two differences between our model
and theirs are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The discretization grid is slightly different since we consider the exchange
to happen between cell $k$ and cell $k+1$ at the node between them, while they
consider an exchange between $k-1$ and $k+1$ at cell $k$.&lt;/li&gt;
&lt;li&gt;They consider two flow unit which just crossed reach the same temperature,
while we consider a heat exchange limited by the temperature difference
(the two flows do not reach identical temperatures but tend towards it).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally we can change the ratio:
$$\frac{\dot{m}_1\cdot c_1}{\dot{m}_2\cdot c_2}$$ for the counterflow model
as we did in the parallel case.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; discrete_crossing(n, h, ratio; itermax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50000&lt;/span&gt;)
    u1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Matrix&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;Float64&lt;/span&gt;}(undef, itermax, n)
    u2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Matrix&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;Float64&lt;/span&gt;}(undef, itermax, n)
    u1[&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;
    u1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;
    u2[&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;,n] &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;
    u2[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; iter &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;itermax
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            δq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (u2[iter&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, k&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; u1[iter&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, k]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50.0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; n
            u2[iter, k]   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; u2[iter&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, k&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; δq &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ratio
            u1[iter, k&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; u1[iter&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, k]   &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; δq
        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    (u1,u2)
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Julia tip&lt;/em&gt;: note that we do not define a new function for this but
create a &lt;strong&gt;method&lt;/strong&gt; for the function &lt;code&gt;discrete_crossing&lt;/code&gt; defined above
with a new signature &lt;code&gt;(n, h, ratio)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can plot the result:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; x0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;, length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;, stop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L)
p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plot(x0, a1[&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;], label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;u1 ratio 1.0&amp;#34;&lt;/span&gt;, legend &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;bottomright)
plot!(p, x0, a2[&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;], label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;u2 ratio 1.0&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ratio &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; p
    (r1, r2) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; discrete_crossing(&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;, ratio)
    plot!(p, x0, r1[&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;], label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;u1 ratio &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;(ratio)&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
    plot!(p, x0, r2[&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;], label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;u2 ratio &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;(ratio)&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
xlabel!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x (m)&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://matbesancon.github.io/img/posts/heatex/ratio_variation.svg&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;To keep this post short, we will not show the influence of all parameters.
Some key effects to consider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Increasing $h$ increases the gap between the flow temperatures&lt;/li&gt;
&lt;li&gt;Increasing the number of steps does not change the result for a step size
small enough&lt;/li&gt;
&lt;li&gt;Increasing the exchanger length reduces the gap&lt;/li&gt;
&lt;li&gt;A ratio of 1 minimizes the temperature difference at every point
(and thus minimizes the entropy). This very low entropy creation is a positive
sign for engineers from a thermodynamics point of view: we are not &amp;ldquo;degrading&amp;rdquo;
the &amp;ldquo;quality&amp;rdquo; of available energy to perform this heat exchange or in other
terms, we are not destroying &lt;a href=&#34;https://en.wikipedia.org/wiki/Exergy&#34; target=&#34;_blank&#34;&gt;exergy&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feel free to reach out on &lt;a href=&#34;https://twitter.com/matbesancon&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt;
or via email if you have comments or questions, I&amp;rsquo;d be glad to take both.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Note on process engineering&lt;/em&gt;
The term is gaining more traction in English, and should replace
chemical engineering in higher education to acknowledge the diversity of
application fields, greater than the chemical industry alone.
The German equivalent &lt;em&gt;Verfahrenstechnik&lt;/em&gt; has been used for decades and
&lt;em&gt;Génie des Procédés&lt;/em&gt; is now considered a norm in most French-speaking
universities and &lt;a href=&#34;https://en.wikipedia.org/wiki/Soci%C3%A9t%C3%A9_Fran%C3%A7aise_de_G%C3%A9nie_des_Proc%C3%A9d%C3%A9s&#34; target=&#34;_blank&#34;&gt;consortia&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Edit: thanks BYP for the sharp-as-ever proofreading&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Sources:&lt;/p&gt;

&lt;p&gt;[1] Levi M. A Near-perfect Heat Exchange. SIAM news. 2018 Dec;51(10):4.&lt;/p&gt;

&lt;p&gt;[2] Borel L, Favrat D. Thermodynamique et énergétique. PPUR presses polytechniques; 2nd edition, 2011.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Image sources:
[3] Geogebra&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Bilevel Framework for Optimal Price-Setting of Time-and-Level-of-Use Tariffs</title>
      <link>https://matbesancon.github.io/project/tlou/</link>
      <pubDate>Tue, 18 Dec 2018 00:00:00 +0100</pubDate>
      
      <guid>https://matbesancon.github.io/project/tlou/</guid>
      <description>&lt;p&gt;The pre-print of the presented work can be found on &lt;a href=&#34;https://arxiv.org/abs/1809.00512&#34; target=&#34;_blank&#34;&gt;arXiv&lt;/a&gt;.
The manuscript has also been submitted and should be published in the coming months.&lt;/p&gt;

&lt;p&gt;This project was presented at several conferences, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Optimization days, Montréal, May 2018&lt;/li&gt;
&lt;li&gt;NSERC Energy Storage Technology Network (NEST-Net) annual meeting, Toronto, June 2018.
It was under the network&amp;rsquo;s project &lt;em&gt;Optimal Brokerage Models for the Grid Integration of Energy Storage&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;JuliaCon, London, August 2018 (poster)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An open-source Julia package has been released
&lt;a href=&#34;https://github.com/matbesancon/TLOU.jl&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; for other researchers to
model Time-and-Level-of-Use tariffs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JuliaStats contributions</title>
      <link>https://matbesancon.github.io/project/distributions/</link>
      <pubDate>Tue, 18 Dec 2018 00:00:00 +0100</pubDate>
      
      <guid>https://matbesancon.github.io/project/distributions/</guid>
      <description>&lt;p&gt;Contributions to the &lt;a href=&#34;https://juliastats.github.io&#34; target=&#34;_blank&#34;&gt;JuliaStats&lt;/a&gt; ecosystem,
especially the &lt;a href=&#34;https://github.com/JuliaStats/Distributions.jl&#34; target=&#34;_blank&#34;&gt;Distributions.jl&lt;/a&gt;
package for modeling probability distributions in Julia using a minimal
and flexible interface.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>YASPR: Yet Another Snake on Piston &amp; Rust</title>
      <link>https://matbesancon.github.io/project/yaspr/</link>
      <pubDate>Tue, 18 Dec 2018 00:00:00 +0100</pubDate>
      
      <guid>https://matbesancon.github.io/project/yaspr/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Introduction to Julia and its ecosystems for optimization and modeling</title>
      <link>https://matbesancon.github.io/talk/julia_opt_workshop/</link>
      <pubDate>Wed, 21 Nov 2018 00:00:00 +0100</pubDate>
      
      <guid>https://matbesancon.github.io/talk/julia_opt_workshop/</guid>
      <description>&lt;p&gt;We gave an overview of the Julia programming language for researchers in
optimization theory and practice. The talk was divided in four parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Introduction to the Julia language, key features and central mechanisms.
Example use cases with linear algebra.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://github.com/JuliaSmoothOptimizers&#34; target=&#34;_blank&#34;&gt;JuliaSmoothOptimizers&lt;/a&gt; ecosystem, organization &amp;amp; usage&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/JuliaGraphs&#34; target=&#34;_blank&#34;&gt;JuliaGraphs&lt;/a&gt; &amp;amp; the &lt;a href=&#34;https://github.com/JuliaGraphs/LightGraphs.jl&#34; target=&#34;_blank&#34;&gt;LightGraphs&lt;/a&gt; package, features and structure&lt;/li&gt;
&lt;li&gt;A quick tour of JuliaOpt &amp;amp; &lt;a href=&#34;https://github.com/juliaopt/jump.jl&#34; target=&#34;_blank&#34;&gt;JuMP&lt;/a&gt; for structured, constrained optimization&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>A year in PhD</title>
      <link>https://matbesancon.github.io/post/2018-09-27-year-in-phd/</link>
      <pubDate>Thu, 27 Sep 2018 00:00:00 +0200</pubDate>
      
      <guid>https://matbesancon.github.io/post/2018-09-27-year-in-phd/</guid>
      <description>

&lt;hr /&gt;

&lt;p&gt;So, it&amp;rsquo;s been a bit more than a year since I took a flight to Montréal to
start a PhD on mathematical optimization &amp;amp; game theory for smart grids.&lt;/p&gt;

&lt;p&gt;After the rush of summer conferences, and my return to France
for a part of my PhD at INRIA Lille, it is a good time to take a step back
and think of what has been going on and what is coming next. I&amp;rsquo;ll also answer
some common questions I had in a more thoughtful way than I can in a
bar conversation/family dinner. Maybe this can also help other PhD students seeing
we are not in the same boat, but they all still look alike.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: a PhD is not studies in the sense you think, and it&amp;rsquo;s not a job either,
these mental models will not help much.&lt;/p&gt;

&lt;h2 id=&#34;so-when-are-you-going-to-finish&#34;&gt;So, when are you going to finish?&lt;/h2&gt;

&lt;p&gt;I don&amp;rsquo;t know, when are you going to finish your job? It doesn&amp;rsquo;t look
like it&amp;rsquo;s been moving that much recently. Or when will this company
you&amp;rsquo;re building be &amp;ldquo;finished&amp;rdquo;?&lt;/p&gt;

&lt;p&gt;These questions are similar, really. A research subject is rarely isolated,
don&amp;rsquo;t see this as emptying a 4-year bowl of soup. It&amp;rsquo;s more like picking
berries: you grab one, then the next, which is close enough, oh and this one
is nice, but a bit further, I&amp;rsquo;ll have to stretch my arm a bit more to reach it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://matbesancon.github.io/img/posts/phd-year/blueberries.jpg&#34; alt=&#34;&#34; /&gt;[1]&lt;/p&gt;

&lt;p&gt;I had some interesting discussions in Montréal about when and how to know
you should bring your PhD to a conclusion. And the answer should always be
that it depends what your objectives are, if you want to include this last
project in the PhD. So no, I don&amp;rsquo;t know when I will finish, because if every
step was predictable in terms of duration and success, it would not be a PhD or
even research, what I do know is that I don&amp;rsquo;t want to block interesting projects
or leave only half-explored research trails because &amp;ldquo;3 years is plenty&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;it-must-feel-weird-getting-back-to-university&#34;&gt;It must feel weird, getting back to university&lt;/h2&gt;

&lt;p&gt;It does, but not how you imagine. I was previously at
&lt;a href=&#34;https://matbesancon.github.io/post/2016-08-11-back-to-startup/&#34;&gt;a startup&lt;/a&gt; for a while.
What I was used to is a great autonomy in execution. What the
PhD is about is adding self-determination of the objectives,
expected results, and means. It does not mean I&amp;rsquo;m working alone
while I was in a team before, it means the degree of ownership
of successes and failures is much higher, try to picture the
three following sentences in a conversation:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&amp;ldquo;I was at a startup before, it failed and I moved on to XYZ.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;I started a PhD but didn&amp;rsquo;t get through, then moved on to XYZ.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;I built a company, it failed, now I&amp;rsquo;m working on XYZ.&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It depends on the relationship to failure the person has in front of
you, but for those I know, (1) is just an external cause, while (2)
and (3) are personal failures, that&amp;rsquo;s ownership.&lt;/p&gt;

&lt;p&gt;The biggest conclusion I made roughly after 6 months in is that a
single-founder startup is one of the closest mental models to keep
during the PhD, which explains several things, like inability to
explain exactly what you do to your family and friends, imposter
syndrome or procrastination.&lt;/p&gt;

&lt;h2 id=&#34;so-you-get-paid-enough-to-buy-noodles&#34;&gt;So you get paid enough to buy noodles?&lt;/h2&gt;

&lt;p&gt;Yes, I&amp;rsquo;m living quite well thanks, I can even afford fancying
my noodles, but let&amp;rsquo;s dig deeper on the matter of €/$/£.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: my PhD is between applied maths &amp;amp; computer science, I know
all majors are not that financially comfortable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://matbesancon.github.io/img/posts/phd-year/noodles.png&#34; alt=&#34;&#34; /&gt;[2]&lt;/p&gt;

&lt;p&gt;I also know it&amp;rsquo;s considered rude to talk about money in some cultures,
including France, especially if you&amp;rsquo;re not complaining; so yes, I&amp;rsquo;ll
be rude.&lt;/p&gt;

&lt;p&gt;When I&amp;rsquo;m in France, I&amp;rsquo;m paid slightly less than some engineers with the same
level of qualification. The difference is higher if I&amp;rsquo;m comparing to what
I would have had on Data Science, applied maths and software development
positions. The difference between what I would earn and the scholarship
is higher in Canada. Still, like I said, I can live without watching
my bank account towards the end of the month.&lt;/p&gt;

&lt;p&gt;The biggest danger of getting money monthly is thinking of it as a salary,
meaning you&amp;rsquo;re thinking of the PhD as a job, meaning you&amp;rsquo;re thinking of
yourself as an employee. On the paper, the money I get in France is a salary
from my research institute, but one should keep in mind this is only on paper,
the danger is to get the wrong mindset: &lt;strong&gt;think of yourself as a single person
carrying a project, not an employee&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;People often argue that they have a research director, who is de facto their boss.
I don&amp;rsquo;t think this is the case, directors choose project proposals and people
to carry them out (the order of this choice varies). They choose to invest
time, effort and money from their structure into this person+project pair,
without dictating to the letter what the outcomes of the projects are.
Their retribution for this exchange is a partial ownership in the outcomes
of the project (publications, conferences, software).
Sounds familiar? Yes I&amp;rsquo;m looking at the Wikipedia
&lt;a href=&#34;https://en.wikipedia.org/wiki/Venture_capital&#34; target=&#34;_blank&#34;&gt;page on Venture Capital&lt;/a&gt;.
Let&amp;rsquo;s dig deeper: thesis directors invest this time, money and energy in
areas they are familiar with, they have worked in and/or have mentored other
people on. This sounds like the VC firms&amp;rsquo; investment theses.
Read &lt;a href=&#34;https://a16z.com/2016/08/20/why-software-is-eating-the-world/&#34; target=&#34;_blank&#34;&gt;these&lt;/a&gt;
&lt;a href=&#34;https://hackernoon.com/the-birth-of-a-venture-capital-investment-thesis-afd2903ae12&#34; target=&#34;_blank&#34;&gt;two&lt;/a&gt;
articles to see a more proper definition and examples of investment theses
but I hope you&amp;rsquo;ll get my point: PhDs are not R&amp;amp;D employees and directors are
not &amp;ldquo;bosses&amp;rdquo;. If you have friends familiar with how startups work, this should
be fine to explain. If you&amp;rsquo;re talking to people who have been employees their
whole life in traditional structures, I have not yet found a clear and simple
way to explain the situation in a casual conversation, let me know if you have
something.&lt;/p&gt;

&lt;h2 id=&#34;so-back-to-being-a-student-heh&#34;&gt;So, back to being a student heh?&lt;/h2&gt;

&lt;p&gt;This image is much easier to correct. On the paper this is true,
a PhD has a student status, even when working close with/in
companies like in Germany, Denmark or France CIFRE theses.
Some people will ask this genuinely because they still picture their
undergraduate years and think you&amp;rsquo;re back to this.
So, it&amp;rsquo;s true, I&amp;rsquo;m taking courses, mostly because I find them
interesting and keeping learning things is a bit of a &lt;em&gt;raison d&amp;rsquo;être&lt;/em&gt;.
But I was also doing so while working, using online courses platform like
&lt;a href=&#34;https://www.coursera.org/&#34; target=&#34;_blank&#34;&gt;Coursera&lt;/a&gt; or
&lt;a href=&#34;https://www.fun-mooc.fr/&#34; target=&#34;_blank&#34;&gt;France Université Numérique&lt;/a&gt;, going to meetups,
reading and writing blog posts. So the thing that changed is maybe the part
of my time dedicated to learning which got higher than when employed.&lt;/p&gt;

&lt;p&gt;Now about the second category of people asking this question, yeah those one.
In general, the points discussed above are enough as an explanation,
but if the tone is really about trolling, which can happen, reverse the question:
&lt;em&gt;&amp;ldquo;Yeah I&amp;rsquo;m a student, I&amp;rsquo;m learning stuff every day. Wait you&amp;rsquo;re not?
Exactly the stagnation I don&amp;rsquo;t want in my life.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Is it mean? Maybe, but the point is not to &amp;ldquo;win&amp;rdquo; a conversation, it&amp;rsquo;s about
shutting down the perpetration of imposter syndrome, own the uniqueness of
your status, both the good and the bad bits. None should be made feel inferior
because they didn&amp;rsquo;t take the conventional, safe and socially accepted path of
the 9-17 workday.&lt;/p&gt;

&lt;h2 id=&#34;re-thinking-my-values-priorities&#34;&gt;Re-thinking my values &amp;amp; priorities&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve written about values &lt;a href=&#34;https://matbesancon.github.io/post/2016-10-7-company-values/&#34;&gt;two years ago&lt;/a&gt;
in the context of a company trying to define who they are.
This is a complex topic, about discovering and understanding what the
group prioritizes collectively.&lt;/p&gt;

&lt;p&gt;As the owner of your project and of your time and resources, it&amp;rsquo;s up to you to define
what is important. This begins with what is measured for success. Coming to academia
from another &lt;em&gt;milieu&lt;/em&gt;, I was not used to the process of publishing in peer-reviewed
journals. First position I&amp;rsquo;ll take and try to maintain: &lt;strong&gt;the measures of academic
success are broken, or at least imperfect&lt;/strong&gt; (reach out to future-me if I change my mind).
One example of this is research software.
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Paraphrasing &lt;a href=&#34;https://twitter.com/mgymrek?ref_src=twsrc%5Etfw&#34;&gt;@mgymrek&lt;/a&gt;:&lt;br&gt;&lt;br&gt;Your paper is cited outside of your field in one semi-related paragraph: *counts towards your career progression*&lt;br&gt;&lt;br&gt;Your academic software package has 100 stars on GitHub: *counts for nothing*&lt;br&gt;&lt;br&gt;Something is wrong here 😐 &lt;a href=&#34;https://twitter.com/hashtag/jsm2018?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#jsm2018&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sean Kross (@seankross) &lt;a href=&#34;https://twitter.com/seankross/status/1024059834654588929?ref_src=twsrc%5Etfw&#34;&gt;July 30, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Had my &amp;quot;software is part of the research process&amp;quot; argument with an academic who wanted to use software to generate results but didn&amp;#39;t want to &amp;quot;concentrate on it too much&amp;quot;. I should start counting how many times I go through this and throw a party when I get to a million.&lt;/p&gt;&amp;mdash; Simon Hettrick (@sjh5000) &lt;a href=&#34;https://twitter.com/sjh5000/status/1043112943372644353?ref_src=twsrc%5Etfw&#34;&gt;September 21, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

If you can, watch
&lt;a href=&#34;https://twitter.com/walkingrandomly&#34; target=&#34;_blank&#34;&gt;Mike Croucher&lt;/a&gt;&amp;rsquo;s excellent
&lt;a href=&#34;https://www.youtube.com/watch?v=8ZSaAM8hhJ4&#34; target=&#34;_blank&#34;&gt;talk&lt;/a&gt; at JuliaCon 2018 for more
depth on the subject.&lt;/p&gt;

&lt;p&gt;The consequence of ignoring software as a valuable result of research is
pretty straight-forward: proprietary software all over.
It&amp;rsquo;s changing in scientific computing, statistics and other fields with
the rise of Julia, R, Python. My domain, mathematical optimization, is
still behind with dominant solvers (the software doing the actual work)
and lots of &lt;a href=&#34;https://en.wikipedia.org/wiki/Algebraic_modeling_language&#34; target=&#34;_blank&#34;&gt;Algebraic Modeling Languages&lt;/a&gt;
(the front-end to interact with the solver) being proprietary.
The last part is &lt;a href=&#34;https://numfocus.org/project/jump&#34; target=&#34;_blank&#34;&gt;changing&lt;/a&gt;,
the first one is still tough.
My point is that people behind software you&amp;rsquo;re
using everyday contribute way more to the success of your PhD than this
obscure paper you cite because the review committee asked you to.
If your university is giving thousands in commercial licenses and
millions in access to paper, maybe you should make them donate both time
and money to the &lt;a href=&#34;https://www.flipcause.com/secure/cause_pdetails/MjM2OA==&#34; target=&#34;_blank&#34;&gt;tools&lt;/a&gt;
you&amp;rsquo;re using. Yes all of &lt;a href=&#34;https://donate.wikimedia.org/wiki/WMFJA1/en/US&#34; target=&#34;_blank&#34;&gt;them&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have been involved in the Julia community, especially within the
&lt;a href=&#34;http://github.com/JuliaGraphs/&#34; target=&#34;_blank&#34;&gt;JuliaGraphs&lt;/a&gt; and
&lt;a href=&#34;http://github.com/JuliaStats/&#34; target=&#34;_blank&#34;&gt;JuliaStats&lt;/a&gt; ecosystems, mostly because these
are subjects I understand (at least a bit) and/or used.
Key take-away:
&lt;div class=&#34;alert alert-note&#34;&gt;&lt;/p&gt;

&lt;p&gt;You don&amp;rsquo;t need to be an expert programmer to help out&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Reporting issues you have and contributing to improve the documentation
is as valuable as writing code.&lt;/p&gt;

&lt;h2 id=&#34;so-it-s-been-a-year&#34;&gt;So&amp;hellip; it&amp;rsquo;s been a year&lt;/h2&gt;

&lt;p&gt;And I&amp;rsquo;m still learning (understand making mistakes, getting stuck, etc),
one of the reasons I had to learn more is not coming from a background
in maths, nor from a research-oriented degree.&lt;/p&gt;

&lt;p&gt;Reach out any way you prefer, &lt;a href=&#34;https://twitter.com/matbesancon&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt;,
&lt;a href=&#34;https://matbesancon.github.io/#contact&#34;&gt;email&lt;/a&gt;. Of course some things I&amp;rsquo;ve written are related
to my situation, I&amp;rsquo;d be interested to know how it relates or not to yours.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Image sources:&lt;br /&gt;
[1] &lt;a href=&#34;https://pxhere.com/en/photo/571187&#34; target=&#34;_blank&#34;&gt;https://pxhere.com/en/photo/571187&lt;/a&gt;&lt;br /&gt;
[2] &lt;a href=&#34;https://pixabay.com/en/noodles-thailand-food-thai-2693009/&#34; target=&#34;_blank&#34;&gt;https://pixabay.com/en/noodles-thailand-food-thai-2693009/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Julia, programming model, type system and use cases</title>
      <link>https://matbesancon.github.io/talk/lillefp_julia/</link>
      <pubDate>Thu, 20 Sep 2018 00:00:00 +0200</pubDate>
      
      <guid>https://matbesancon.github.io/talk/lillefp_julia/</guid>
      <description>&lt;p&gt;Quick overview of the Julia programming language at the LilleFP
meetup. Slides are in Franglish but should be understandable.
The programming model was presented with a quick overview of parts
of the type system and multiple dispatch mechanism.&lt;/p&gt;

&lt;p&gt;It was really nice to be able to exchange with people coming from
very different programming worlds and compare their approach,
opinion and programming needs with some design choices of the
language.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mixed continuous-discrete distributions</title>
      <link>https://matbesancon.github.io/project/mixed_distributions/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://matbesancon.github.io/project/mixed_distributions/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Building our own graph type in Julia</title>
      <link>https://matbesancon.github.io/post/2018-08-17-abstract_graph/</link>
      <pubDate>Fri, 17 Aug 2018 00:00:00 +0200</pubDate>
      
      <guid>https://matbesancon.github.io/post/2018-08-17-abstract_graph/</guid>
      <description>

&lt;hr /&gt;

&lt;p&gt;This is an adapted post on the talk we gave with &lt;a href=&#34;https://twitter.com/fairbanksjp&#34; target=&#34;_blank&#34;&gt;James&lt;/a&gt;
at JuliaCon 2018 in London. You can see the
&lt;a href=&#34;https://matbesancon.github.io/graph_interfaces_juliacon18&#34; target=&#34;_blank&#34;&gt;original slides&lt;/a&gt;,
the video still requires a bit of post-processing.&lt;/p&gt;

&lt;p&gt;Last week &lt;a href=&#34;http://juliacon.org&#34; target=&#34;_blank&#34;&gt;JuliaCon&lt;/a&gt; in London was a great and very condensed experience.
The two talks on &lt;a href=&#34;https://github.com/JuliaGraphs/LightGraphs.jl&#34; target=&#34;_blank&#34;&gt;LightGraphs.jl&lt;/a&gt;
received a lot of positive feedback and more than that, we saw
how people are using the library for a variety of use cases which is a great
signal for the work on the JuliaGraphs ecosystem
(see the &lt;a href=&#34;https://matbesancon.github.io/graph_interfaces_juliacon18/ecosystem.html#/&#34; target=&#34;_blank&#34;&gt;lightning talk&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I wanted to re-build the same graph for people who prefer a post version to
my clumsy live explanations on a laptop not handling dual-screen well
(those who prefer the latter are invited to see the live-stream of the talk).&lt;/p&gt;

&lt;h2 id=&#34;why-abstractions&#34;&gt;Why abstractions?&lt;/h2&gt;

&lt;p&gt;The LightGraphs library is built to contain as few elements as possible to get
anyone going with graphs. This includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The interface a graph type has to comply with to be used&lt;/li&gt;
&lt;li&gt;Essential algorithms implemented by any graph respecting that interface&lt;/li&gt;
&lt;li&gt;A simple, battery-included implementation based on adjacency lists&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The thing is, if you design an abstraction which in fact has just one
implementation, you&amp;rsquo;re doing abstraction wrong. This talks was also a
reality-check for LightGraphs, are we as composable, extensible as we promised?&lt;/p&gt;

&lt;p&gt;The reason for abstraction is also that &lt;strong&gt;minimalism has its price&lt;/strong&gt;.
The package was designed as the least amount of complexity required to get
graphs working. When people started to use it, obviously they needed more
features, some of which they could code themselves, some other required
extensions built within LightGraphs. By getting the core abstractions right,
you guarantee people will be able to use it and to build on top with minimal
friction, while keeping it simple to read and contribute to.&lt;/p&gt;

&lt;h2 id=&#34;our-matrix-graph-type&#34;&gt;Our matrix graph type&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s recall that a graph is a collection of &lt;em&gt;nodes&lt;/em&gt; and a collection of
&lt;em&gt;edges&lt;/em&gt; between these nodes. To keep it simple, for a graph of $n$ edges,
we will consider they are numbered from 1 to n. An edge connects a node $i$
to a node $j$, therefore all the information of a graph can be kept as an
&lt;em&gt;adjacency matrix&lt;/em&gt; $M_{ij}$ of size $n \times n$:&lt;/p&gt;

&lt;p&gt;$$M_{ij} = \begin{cases} 1, &amp;amp; \mbox{if edge (i $\rightarrow$ j) exists} \\ 0 &amp;amp; \mbox{otherwise}\end{cases}$$&lt;/p&gt;

&lt;p&gt;We don&amp;rsquo;t know what the use cases for our type will be, and therefore,
we will parametrize the graph type over the matrix type:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; LightGraphs; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; lg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LightGraphs
&lt;span style=&#34;color:#66d9ef&#34;&gt;mutable&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; MatrixDiGraph{MT &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AbstractMatrix&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;Bool&lt;/span&gt;}} &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;:&lt;/span&gt; lg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;AbstractGraph{&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;}
  matrix&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MT
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The edges are simply mapping an entry (i,j) to a boolean (whether there is an
edge from i to j). Even though creating a graph type that can be directed
or undirected depending on the situation is possible, we are creating a type
that will be directed by default.&lt;/p&gt;

&lt;h2 id=&#34;implementing-the-core-interface&#34;&gt;Implementing the core interface&lt;/h2&gt;

&lt;p&gt;We can now implement the core LightGraphs interface for this type, starting
with methods defined over the type itself, of the form &lt;code&gt;function(g::MyType)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not going to re-define each function here, their meaning can be found
by checking the help in a Julia REPL: &lt;code&gt;?LightGraphs.vertices&lt;/code&gt; or on the
&lt;a href=&#34;http://juliagraphs.github.io/LightGraphs.jl/stable/types.html#AbstractGraph-Type-1&#34; target=&#34;_blank&#34;&gt;documentation page&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;lg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_directed(&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MatrixDiGraph) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
lg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;edgetype(&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MatrixDiGraph) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SimpleGraphs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SimpleEdge{&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;}
lg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ne(g&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MatrixDiGraph) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum(g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;m)
lg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nv(g&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MatrixDiGraph) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; size(g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;m)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]

lg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vertices(g&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MatrixDiGraph) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;nv(g)

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; lg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;edges(g&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MatrixDiGraph)
    n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nv(g)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (lg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SimpleGraphs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SimpleEdge(i,j) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;n &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;n &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;m[i,j])
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note the last function &lt;code&gt;edges&lt;/code&gt;, for which the documentation specifies that we
need to return an &lt;strong&gt;iterator&lt;/strong&gt; over edges. We don&amp;rsquo;t need to collect the comprehension
in a Vector, returning a lazy generator.&lt;/p&gt;

&lt;p&gt;Some operations have to be defined on both the graph and a node, of the form
&lt;code&gt;function(g::MyType, node)&lt;/code&gt;.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;lg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;outneighbors(g&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MatrixDiGraph, node) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [v &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;lg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nv(g) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;m[node, v]]
lg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;inneighbors(g&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MatrixDiGraph, node) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [v &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;lg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nv(g) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;m[v, node]]
lg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;has_vertex(g&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MatrixDiGraph, v&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Integer&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; lg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nv(g) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Out &lt;code&gt;MatrixDiGraph&lt;/code&gt; type is pretty straight-forward to work with and all
required methods are easy to relate to the way information is stored in the
adjacency matrix.&lt;/p&gt;

&lt;p&gt;The last step is implementing methods on both the graph and an edge of the
form &lt;code&gt;function(g::MatrixDiGraph,e)&lt;/code&gt;. The only one we need here is:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;lg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;has_edge(g&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MatrixDiGraph,i,j) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;m[i,j]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;optional-mutability&#34;&gt;Optional mutability&lt;/h2&gt;

&lt;p&gt;Mutating methods were removed from the core interace some time ago,
as they are not required to describe a graph-like behavior.
The general behavior for operations mutating a graph is to return whether
the operation succeded. They consist in adding or removing elements from
either the edges or nodes.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; LightGraphs&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; rem_edge!, rem_vertex!, add_edge!, add_vertex!

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; add_edge!(g&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MatrixDiGraph, e)
    has_edge(g,e) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
    n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nv(g)
    (src(e) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; dst(e) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; n) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
    g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;m[src(e),dst(e)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; rem_edge!(g&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MatrixDiGraph,e)
    has_edge(g,e) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
    n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nv(g)
    (src(e) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; dst(e) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; n) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
    g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;m[src(e),dst(e)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; add_vertex!(g&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MatrixDiGraph)
    n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nv(g)
    m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; zeros(&lt;span style=&#34;color:#66d9ef&#34;&gt;Bool&lt;/span&gt;,n&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,n&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    m[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;n,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;n] &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;m
    g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;testing-our-graph-type-on-real-data&#34;&gt;Testing our graph type on real data&lt;/h2&gt;

&lt;p&gt;We will use the graph type to compute the PageRank of&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; SNAPDatasets
data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SNAPDatasets&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loadsnap(&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;ego_twitter_d)
twitter_graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MatrixDiGraph(lg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;adjacency_matrix(data)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
ranks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pagerank(twitter_graph)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note the broadcast check &lt;code&gt;.==1&lt;/code&gt;, &lt;code&gt;adjacency_matrix&lt;/code&gt; is specified to yield a
matrix of &lt;code&gt;Int&lt;/code&gt;, so we use this to cast the entries to boolean values.&lt;/p&gt;

&lt;p&gt;I took only the first 10 nodes of the graph, but feel free to do the same with
500, 1000 or more nodes, depending on what your machine can stand  🙈&lt;/p&gt;

&lt;h2 id=&#34;overloading-non-mandatory-functions&#34;&gt;Overloading non-mandatory functions&lt;/h2&gt;

&lt;p&gt;Some methods are already implemented for free by implementing the core interface.
That does not mean it should be kept as-is in every case. Depending on your
graph type, some functions might have smarter implementations, let&amp;rsquo;s see one
example. What &lt;code&gt;MatrixDiGraph&lt;/code&gt; is already an &lt;code&gt;adjacency_matrix&lt;/code&gt;, so we know
there should be no computation required to return it (it&amp;rsquo;s almost a no-op).&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; BenchmarkTools&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;@btime&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;@btime&lt;/span&gt; adjacency_matrix(bigger_twitter)
println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;why did that take so long?&amp;#34;&lt;/span&gt;)
lg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;adjacency_matrix(g&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;MatrixDiGraph) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;(g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;m)
&lt;span style=&#34;color:#a6e22e&#34;&gt;@btime&lt;/span&gt; A &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;adjacency_matrix(bigger_twitter)
println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;that&amp;#39;s better.&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This should yield roughly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;13.077 ms (5222 allocations: 682.03 KiB)
why did that take so long?
82.077 μs (6 allocations: 201.77 KiB)
that&#39;s better.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can fall down to a no-op by storing the matrix entries as &lt;code&gt;Int&lt;/code&gt; directly,
but the type ends up being a bit heavier in memory, your type, your trade-off.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ve implemented a graph type suited to our need in a couple lines of Julia,
guided by the &lt;code&gt;LightGraphs&lt;/code&gt; interface specifying &lt;strong&gt;how&lt;/strong&gt; to think about our
graph instead of getting in the way of &lt;strong&gt;what&lt;/strong&gt; to store. A lighter version
of this post can be read as &lt;a href=&#34;https://matbesancon.github.io/graph_interfaces_juliacon18/&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As usual, ping me on &lt;a href=&#34;https://twitter.com/matbesancon&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt; for any
question or comment.&lt;/p&gt;

&lt;h2 id=&#34;bonus&#34;&gt;Bonus&lt;/h2&gt;

&lt;p&gt;If you read this and want to try building your own graph type, here are two
implementations you can try out, put them out in a public repo and show them off
afterwards:
1. We created a type just for directed graphs, why bothering so much? You can create your own type which can be directed or not,
either by storing the information in the &lt;code&gt;struct&lt;/code&gt; or by parametrizing the type
and getting the compiler to do the work for you.
2. We store the entries as an &lt;code&gt;AbstractMatrix{Bool}&lt;/code&gt;, if your graph is dense
enough (how dense? No idea), it might be interesting to store entries as as
&lt;code&gt;BitArray&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Image source: GraphPlot.jl&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
