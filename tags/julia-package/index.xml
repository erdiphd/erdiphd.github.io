<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Julia Package on μβ</title>
    <link>https://matbesancon.github.io/tags/julia-package/</link>
    <description>Recent content in Julia Package on μβ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Mathieu Besançon</copyright>
    <lastBuildDate>Tue, 04 Sep 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://matbesancon.github.io/tags/julia-package/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mixed continuous-discrete distributions</title>
      <link>https://matbesancon.github.io/project/mixed_distributions/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://matbesancon.github.io/project/mixed_distributions/</guid>
      <description></description>
    </item>
    
    <item>
      <title>JuliaGraphs contributions</title>
      <link>https://matbesancon.github.io/project/juliagraphs/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://matbesancon.github.io/project/juliagraphs/</guid>
      <description>Starting from a weird Kaggle side-project during the Chrismas holidays, I gradually got involved in the JuliaGraphs ecosystem. After some discussion on the Julia Slack #graphs channel, I went from reporting a simple feature I needed to helping with the re-organization by splitting out two packages:
 LightGraphsMatching.jl LightGraphsFlows.jl  I also implemented the min-cost flow problem formulated as a linear optimization problem formulated using MathProgBase.jl, using any user-provided solver.</description>
    </item>
    
    <item>
      <title>WebFuncs</title>
      <link>https://matbesancon.github.io/project/webfuncs/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://matbesancon.github.io/project/webfuncs/</guid>
      <description>WebFuncs.jl is a Julia project testing the language out of its natural scope. Having built quite a bit with Go and Python, I wanted to see if the Julia ecosystem had tools for HTTP handling.
The inspiration of a simple-to-use function server came from the fx project. Define your function, the package throws it as a server for you.
The package has been accepted on Julia package repository and can be fetched using Pkg.</description>
    </item>
    
  </channel>
</rss>