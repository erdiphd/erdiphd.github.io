<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Julia on μβ</title>
    <link>https://mbesancon.github.io/tags/julia/</link>
    <description>Recent content in Julia on μβ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Mathieu Besançon</copyright>
    <lastBuildDate>Wed, 23 May 2018 00:00:00 -0400</lastBuildDate>
    <atom:link href="/tags/julia/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Tackling the cutting stock problem: part 1, problem exploration</title>
      <link>https://mbesancon.github.io/post/2018-05-23-colgen/</link>
      <pubDate>Wed, 23 May 2018 00:00:00 -0400</pubDate>
      
      <guid>https://mbesancon.github.io/post/2018-05-23-colgen/</guid>
      <description>

&lt;p&gt;Integer optimization often feels weird (at least to me). Simple reformulations
of a (mixed) integer optimization problem (MIP) can make it way easier to solve.
We&amp;rsquo;re going to explore one well-known example of such integer problem in two
blog posts. This first part introduces the problem and develops a naive solution.
We&amp;rsquo;re going to see why it&amp;rsquo;s complex to solve and why this formulation does not
scale.&lt;/p&gt;

&lt;p&gt;Among major reformulations, decomposition techniques leverage special
structures to build an easy-to-solve sub-problem and a &amp;ldquo;master problem&amp;rdquo; converging
to the exact solution to the initial problem. That&amp;rsquo;s what we&amp;rsquo;re going to see in
a second post.&lt;/p&gt;

&lt;h2 id=&#34;integer-optimization-reminder&#34;&gt;Integer optimization reminder&lt;/h2&gt;

&lt;p&gt;An optimization problem takes three components: decisions variables $x$, a set of
constraints telling you if a decision is feasible or not and a cost function
$c(x)$ giving a total cost of a decision. Optimization is a domain of applied
mathematics consisting in finding the best feasible decision for a problem.
Lots of decision problems come with &lt;em&gt;integrality constraints&lt;/em&gt;: if $x$ is the
decision, then it can only take integer values 0,1,2&amp;hellip; or even only binary
values ${0,1}$. Think of problems involving number of units produced
for a good, yes/no decisions, etc&amp;hellip; If a problem has lots of variables, naive
enumerations of feasible solutions becomes impossible: even problems with 50
variables can make your average laptop crash.&lt;/p&gt;

&lt;h2 id=&#34;the-cutting-stock-problem&#34;&gt;The cutting stock problem&lt;/h2&gt;

&lt;p&gt;The problem is not new and has been given quite some thoughts because of its
different industrial applications, it has been one of the first applications of
the column generation method we are going to use. The key elements of the problems
are: given some large rolls (metal, paper or other), we need to cut smaller
portions of given lengths to satisfy a demand for the different small lengths.
Find &lt;a href=&#34;https://en.wikipedia.org/wiki/Cutting_stock_problem&#34; target=&#34;_blank&#34;&gt;more details here&lt;/a&gt;.
A small instance might be: given rolls of size $100cm$, we want to cut at least
7 rolls of size $12cm$ and 9 rolls of size $29cm$. The objective is to minimize
the number of big rolls to satisfy this demand.&lt;/p&gt;

&lt;p&gt;How do we formulate this mathematically?&lt;/p&gt;

&lt;h3 id=&#34;decisions&#34;&gt;Decisions&lt;/h3&gt;

&lt;p&gt;$Y_i$ is a binary decision indicating if we use the big roll number $i$. $X_{ij}$ is an integer
giving the number of times we cut a small roll $j$ in the big roll $i$.&lt;/p&gt;

&lt;h3 id=&#34;constraints&#34;&gt;Constraints&lt;/h3&gt;

&lt;p&gt;$Y$ are binary variables, $X$ are integer. Now the less trivial constraints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Demand satisfaction constraint&lt;/strong&gt;: the sum over all $i$ big rolls of the cut $j$
has to satisfy the demand for that cut:
$$\sum_{i} X_{ij} \geq D_j $$&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Roll size constraint&lt;/strong&gt;: if a roll is used, we cannot fit more width onto it
than its total width:
$$\sum_{j} X_{ij} \cdot W_j \leq L \cdot Y_i $$&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;a-first-naive-implementation&#34;&gt;A first naive implementation&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s first import the necessary packages: we&amp;rsquo;re using JuMP as a modeling
tool, which is an optimization-specific language embedded in Julia
(compare it to AMPL, GAMS, Pyomo, PuLP).
As I consider it a language, I&amp;rsquo;ll do a full import into my namespace with &lt;code&gt;using&lt;/code&gt;.
We also use &lt;code&gt;Cbc&lt;/code&gt;, an open-source solver for integer problems from the Coin-OR
suite.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;using&lt;/span&gt; JuMP
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;using&lt;/span&gt; Cbc&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt; CbcSolver
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;function&lt;/span&gt; cutting_stock_model(maxwidth, widths, demand, N &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; sum(demand))
    m &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; Model(solver &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; CbcSolver())
    Y &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #9999FF&#34;&gt;@variable&lt;/span&gt;(m, Y[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;N],Bin)
    X &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #9999FF&#34;&gt;@variable&lt;/span&gt;(m, X[i&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;N,j&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;length(widths)],&lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;Int&lt;/span&gt;)
    demand_satisfac &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #9999FF&#34;&gt;@constraint&lt;/span&gt;(m, [j&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;length(widths)],
        sum(X[i,j] &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color: #006699&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;N) &lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;=&lt;/span&gt; demand[j]
    )
    roll_size_const &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #9999FF&#34;&gt;@constraint&lt;/span&gt;(m, [i&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;N],
        sum(X[i,j] &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; widths[j] &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color: #006699&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;length(widths)) &lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;=&lt;/span&gt; Y[i] &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; maxwidth
    )
    &lt;span style=&#34;color: #9999FF&#34;&gt;@objective&lt;/span&gt;(m, Min, sum(Y[i] &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color: #006699&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;N))
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; (m, X, Y)
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here $N$ has to be an upper bound on the number of big rolls to use, otherwise
the problem will be infeasible (not enough big rolls to find a solution
satisfying the demand). An initial naive value for this could be the total
demand, after all one small cut per roll can be considered a worst-case solution.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see what the model looks like for different instances:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;julia&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; cutting_stock_model(&lt;span style=&#34;color: #FF6600&#34;&gt;100&lt;/span&gt;, [&lt;span style=&#34;color: #FF6600&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;10&lt;/span&gt;], [&lt;span style=&#34;color: #FF6600&#34;&gt;85&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;97&lt;/span&gt;], &lt;span style=&#34;color: #FF6600&#34;&gt;200&lt;/span&gt;)
(Minimization problem with&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;
 &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;602&lt;/span&gt; linear constraints
 &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;600&lt;/span&gt; variables&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;200&lt;/span&gt; binary, &lt;span style=&#34;color: #FF6600&#34;&gt;400&lt;/span&gt; integer
Solver is CbcMathProg,
X[i,j], integer, ∀ i &lt;span style=&#34;color: #555555&#34;&gt;∈&lt;/span&gt; {&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;,…,&lt;span style=&#34;color: #FF6600&#34;&gt;199&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;200&lt;/span&gt;}, j &lt;span style=&#34;color: #555555&#34;&gt;∈&lt;/span&gt; {&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;},
Y[i] &lt;span style=&#34;color: #555555&#34;&gt;∈&lt;/span&gt; {&lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;} ∀ i &lt;span style=&#34;color: #555555&#34;&gt;∈&lt;/span&gt; {&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;,…,&lt;span style=&#34;color: #FF6600&#34;&gt;199&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;200&lt;/span&gt;})

julia&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; cutting_stock_model(&lt;span style=&#34;color: #FF6600&#34;&gt;100&lt;/span&gt;, [&lt;span style=&#34;color: #FF6600&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;25&lt;/span&gt;], [&lt;span style=&#34;color: #FF6600&#34;&gt;85&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;97&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;52&lt;/span&gt;], &lt;span style=&#34;color: #FF6600&#34;&gt;300&lt;/span&gt;)
(Minimization problem with&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;
 &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;1203&lt;/span&gt; linear constraints
 &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;1200&lt;/span&gt; variables&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;300&lt;/span&gt; binary, &lt;span style=&#34;color: #FF6600&#34;&gt;900&lt;/span&gt; integer
Solver is CbcMathProg,
X[i,j], integer,∀ i &lt;span style=&#34;color: #555555&#34;&gt;∈&lt;/span&gt; {&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;,…,&lt;span style=&#34;color: #FF6600&#34;&gt;299&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;300&lt;/span&gt;}, j &lt;span style=&#34;color: #555555&#34;&gt;∈&lt;/span&gt; {&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;},
Y[i] &lt;span style=&#34;color: #555555&#34;&gt;∈&lt;/span&gt; {&lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;} ∀ i &lt;span style=&#34;color: #555555&#34;&gt;∈&lt;/span&gt; {&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;,…,&lt;span style=&#34;color: #FF6600&#34;&gt;299&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;300&lt;/span&gt;})

julia&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; cutting_stock_model(&lt;span style=&#34;color: #FF6600&#34;&gt;100&lt;/span&gt;, [&lt;span style=&#34;color: #FF6600&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;25&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;40&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;30&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;41&lt;/span&gt;], [&lt;span style=&#34;color: #FF6600&#34;&gt;85&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;97&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;52&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;63&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;77&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;31&lt;/span&gt;], &lt;span style=&#34;color: #FF6600&#34;&gt;500&lt;/span&gt;)
(Minimization problem with&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;
 &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;3506&lt;/span&gt; linear constraints
 &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;3500&lt;/span&gt; variables&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;500&lt;/span&gt; binary, &lt;span style=&#34;color: #FF6600&#34;&gt;3000&lt;/span&gt; integer
Solver is CbcMathProg,
X[i,j], integer, ∀ i &lt;span style=&#34;color: #555555&#34;&gt;∈&lt;/span&gt; {&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;,…,&lt;span style=&#34;color: #FF6600&#34;&gt;499&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;500&lt;/span&gt;}, j &lt;span style=&#34;color: #555555&#34;&gt;∈&lt;/span&gt; {&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;,…,&lt;span style=&#34;color: #FF6600&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;6&lt;/span&gt;},
Y[i] &lt;span style=&#34;color: #555555&#34;&gt;∈&lt;/span&gt; {&lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;} ∀ i &lt;span style=&#34;color: #555555&#34;&gt;∈&lt;/span&gt; {&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;,…,&lt;span style=&#34;color: #FF6600&#34;&gt;499&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;500&lt;/span&gt;})
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;We see the number of variables and constraints explode as we add more possible
cut sizes, the model also becomes more and more difficult to solve. Without
going into details on the solving process, two things make the problem difficult
to solve:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Symmetry: if we place cuts on a roll $Y_1$ and leave another $Y_2$ unused,
the resulting solution is concretely the same as using $Y_2$ and leaving $Y_1$
unused.&lt;/li&gt;
&lt;li&gt;Bad relaxation: integer solvers mostly work by solving a &amp;ldquo;relaxed&amp;rdquo; version
of the problem without the integrality constraint, and then iteratively
restricting the problem to find the best integer solution. If the relaxed
version of the problem yields solutions far away from an integer one, the solver
will have more work to get there.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Difficulty (1) is pretty intuitive, but we could get some insight on (2).
Let&amp;rsquo;s define our relaxed problem. We&amp;rsquo;re going to use the &lt;code&gt;Clp&lt;/code&gt; solver, which
will solve the same problem, but without the &lt;code&gt;Int&lt;/code&gt; restriction for $X$
nor the &lt;code&gt;Bin&lt;/code&gt; restriction for $Y$:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;function&lt;/span&gt; relaxed_cutting_stock(maxwidth, widths, demand, N &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; sum(demand))
   m &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; Model(solver &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; ClpSolver())
   Y &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #9999FF&#34;&gt;@variable&lt;/span&gt;(m, &lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;=&lt;/span&gt; Y[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;N] &lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;)
   X &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #9999FF&#34;&gt;@variable&lt;/span&gt;(m, X[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;N,&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;length(widths)] &lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;)
   demand_satisfac &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #9999FF&#34;&gt;@constraint&lt;/span&gt;(m, [j&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;length(widths)], sum(X[i,j] &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color: #006699&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;N) &lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;=&lt;/span&gt; demand[j])
   roll_size_const &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #9999FF&#34;&gt;@constraint&lt;/span&gt;(m, [i&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;N], sum(X[i,j] &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; widths[j] &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color: #006699&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;length(widths)) &lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;=&lt;/span&gt; Y[i] &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; maxwidth)
   &lt;span style=&#34;color: #9999FF&#34;&gt;@objective&lt;/span&gt;(m, Min, sum(Y[i] &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color: #006699&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;N))
   &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; (m,Y,X)
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see the results:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;julia&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; res &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; [(i,getvalue(Y[i])) &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color: #006699&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;N &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;if&lt;/span&gt; getvalue(Y[i]) ≉ &lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;]
&lt;span style=&#34;color: #FF6600&#34;&gt;33&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt;element &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;Array&lt;/span&gt;{&lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;Tuple&lt;/span&gt;{&lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;Int64&lt;/span&gt;,&lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;Float64&lt;/span&gt;},&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;
 (&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;26&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;27&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;29&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;31&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.9&lt;/span&gt;)
 (&lt;span style=&#34;color: #FF6600&#34;&gt;84&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)

idxs &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; [i &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; (i,_ ) &lt;span style=&#34;color: #006699&#34;&gt;in&lt;/span&gt; res]
julia&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; [getvalue(X)[i,&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;] &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color: #006699&#34;&gt;in&lt;/span&gt; idxs]
&lt;span style=&#34;color: #FF6600&#34;&gt;33&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt;element &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;Array&lt;/span&gt;{&lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;Array&lt;/span&gt;{&lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;Float64&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;},&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;
 [&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;7.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.2&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;4.0&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;4.0&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;4.0&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;4.0&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;4.0&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;4.0&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;4.0&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;4.0&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;10.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;10.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;4.0&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;10.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;10.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;10.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;10.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;10.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;10.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;10.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;4.0&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;4.0&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;4.0&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;8.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.16&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;8.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.16&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;8.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.16&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;8.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.16&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;8.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.16&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;8.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.16&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;8.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.16&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;8.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.16&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;5.8&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.216&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;7.2&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.144&lt;/span&gt;]
 [&lt;span style=&#34;color: #FF6600&#34;&gt;8.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.16&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We notice the $Y$ variables are overall pretty saturated and almost integer,
but the $X$ variables are highly fractional: the linear cuts are divided such
that they fit perfectly the big rolls. This will make the variable hard to
get to an integer solution.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This was a quick intro to the cutting stock problem to get a grasp of its
structure and difficulty, the goal was not to get too technical and keep a
broad target audience.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed it, if that&amp;rsquo;s the case, I&amp;rsquo;ll see you on the next article,
we&amp;rsquo;ll implement a &lt;em&gt;column generation&lt;/em&gt; algorithm from scratch to solve it.
If you have any question/remarks, feel free to &lt;a href=&#34;http://twitter.com/MathieuBesancon/&#34; target=&#34;_blank&#34;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Image source: &lt;a href=&#34;https://www.flickr.com/photos/30478819@N08/38272827564&#34; target=&#34;_blank&#34;&gt;https://www.flickr.com/photos/30478819@N08/38272827564&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Solving the group expenses headache with graphs</title>
      <link>https://mbesancon.github.io/post/2017-09-11-graph-theory-expenses-management/</link>
      <pubDate>Mon, 15 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>https://mbesancon.github.io/post/2017-09-11-graph-theory-expenses-management/</guid>
      <description>

&lt;p&gt;With the end-of-year celebrations, we all had some expenses to manage,
some of them shared with friends, and we all have this eternal problem
of splitting them fairly.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Les bons comptes font les bons amis.&lt;/em&gt;
French wisdom&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Applications like &lt;a href=&#34;https://tricount.com/&#34; target=&#34;_blank&#34;&gt;Tricount&lt;/a&gt; or
&lt;a href=&#34;https://www.splitwise.com/&#34; target=&#34;_blank&#34;&gt;Splitwise&lt;/a&gt; became famous precisely by
solving this problem for you: just enter the expenses one by one, with who
owes whom and you&amp;rsquo;ll get the simplest transactions to balance the amounts at
the end.&lt;/p&gt;

&lt;p&gt;In this post, we&amp;rsquo;ll model the expense balancing problem from a graph
perspective and see how to come up with a solution using Julia and the
JuliaGraphs ecosystem [1].&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;We will use the awesome GraphCoin as a currency in this post, noted GPHC to
be sure no one feels hurt.&lt;/p&gt;

&lt;/div&gt;


&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#the-expenses-model&#34;&gt;The expenses model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reducing-expenses&#34;&gt;Reducing expenses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#breaking-strongly-connected-components&#34;&gt;Breaking strongly connected components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#expenses-as-a-flow-problem&#34;&gt;Expenses as a flow problem&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#computing-net-owed-amount-per-user&#34;&gt;Computing net owed amount per user&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#building-the-graph-and-the-corresponding-flow-problem&#34;&gt;Building the graph and the corresponding flow problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#solving-the-flow-problem&#34;&gt;Solving the flow problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#trying-out-our-solution&#34;&gt;Trying out our solution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conclusion-perspective-and-note-on-gphc&#34;&gt;Conclusion, perspective and note on GPHC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;


&lt;h2 id=&#34;the-expenses-model&#34;&gt;The expenses model&lt;/h2&gt;

&lt;p&gt;Say that we have $n$ users involved in the expenses. An expense
$\delta$ is defined by an amount spent $\sigma$, the user who paid the
expense $p$ and a non-empty set of users who are accountable for
this expense $a$.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$\delta = (\sigma, p, a)$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The total of all expenses $\Sigma$ can be though of as: for any two users $u_i$ and $u_j$,
the total amount that $u_i$ spent for $u_j$. So the expenses are a vector of
triplets &lt;em&gt;(paid by, paid for, amount)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As an example, if I went out for
pizza with Joe and paid 8GPHC for the two of us, the expense is modeled as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$\delta = (\sigma: 8GPHC, p: Mathieu, a: [Mathieu, Joe])$.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now considering I don&amp;rsquo;t keep track of money I owe myself, the sum of all expenses
is the vector composed of one triplet:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$\Sigma = [(Mathieu, Joe, \frac{8}{2} = 4)]$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In Julia, the expense information can be translated to a structure:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;User &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;Int&lt;/span&gt;
GraphCoin &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;Float16&lt;/span&gt;
struct Expense
    payer&lt;span style=&#34;color: #555555&#34;&gt;::&lt;/span&gt;User
    amount&lt;span style=&#34;color: #555555&#34;&gt;::&lt;/span&gt;GraphCoin
    users&lt;span style=&#34;color: #555555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;Set&lt;/span&gt;{User}
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;reducing-expenses&#34;&gt;Reducing expenses&lt;/h2&gt;

&lt;p&gt;Now that we have a full representation of the expenses,
the purpose of balancing is to find a vector of transactions which cancels out
the expenses. A naive approach would be to use the transposed expense matrix
as a transaction matrix. If $u_i$ paid $\Sigma_{i,j}$ for $u_j$,
then $u_j$ paying back that exact amount to $u_i$ will solve the problem.
So we need in the worst case as many transactions after the trip as
$|u| \cdot (|u| - 1)$. For 5 users, that&amp;rsquo;s already 20 transactions,
how can we improve it?&lt;/p&gt;

&lt;h2 id=&#34;breaking-strongly-connected-components&#34;&gt;Breaking strongly connected components&lt;/h2&gt;

&lt;p&gt;Suppose that I paid the pizza slice to Joe for 4GPHC, but he bought me an ice
cream for 2GPHC the day after. In the naive models, we would have two
transactions after the trip: he give me 4GPHC and I would give him 2GPHC. That
does not make any sense, he should simply pay the difference between what he
owes me and what I owe him. For any pair of users, there should only be
at most one transaction from the most in debt to the other, this result in the
worst case of $\frac{|u| \cdot (|u| - 1)}{2}$ transactions, so 10 transactions
for 5 people.&lt;/p&gt;

&lt;p&gt;Now imagine I still paid 4GPHC for Joe, who paid 2GPHC for Marie, who paid 4GPHC
for me. In graph terminology, this is called a
&lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Strongly_connected_component&#34; target=&#34;_blank&#34;&gt;strongly connected component&lt;/a&gt;&lt;/em&gt;.
The point here is that transactions will flow from one user to the next one,
and back to the first.&lt;/p&gt;

&lt;p&gt;If there is a cycle, we can find the minimal due sum within it. In our 3-people
case, it is 2GPHC. That&amp;rsquo;s the amount which is just moving from hand to hand and
back at the origin: it can be forgotten. This yields a new net debt:
I paid 2GPHC for Joe, Marie paid 2GPHC for me. We reduced the number of
transactions and the amount due thanks to this cycle reduction.&lt;/p&gt;

&lt;h2 id=&#34;expenses-as-a-flow-problem&#34;&gt;Expenses as a flow problem&lt;/h2&gt;

&lt;p&gt;To simplify the problem, we can notice we don&amp;rsquo;t actually care about who paid
whom for what, a fair reimbursement plan only requires two conditions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;All people who are owed some money are given at least that amount&lt;/li&gt;
&lt;li&gt;People who owe money don&amp;rsquo;t pay more than the net amount they ought to pay&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We can define a directed flow network with users split in two sets of vertices,
depending on whether they owe or are owed money. We call these two sets $V_1$
and $V_2$ respectively.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There is an edge from any node of $V_1$ to any node of $V_2$.&lt;/li&gt;
&lt;li&gt;We define a &lt;em&gt;source&lt;/em&gt; noted $s$ connected to all vertices in $V_1$, the edge
from $s$ to any node of $V_1$ has a capacity equal to what they owe.&lt;/li&gt;
&lt;li&gt;We define a &lt;em&gt;sink&lt;/em&gt; noted $t$ to which all vertices in $V_2$ connect, with
infinite capacity and a demand (the minimal flow that has to pass through) equal
to what they are owed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this model, GraphCoins will flow from user owing money to users who are
owed money, see &lt;a href=&#34;https://en.wikipedia.org/wiki/Maximum_flow_problem&#34; target=&#34;_blank&#34;&gt;Wikipedia description of the flow problem&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;computing-net-owed-amount-per-user&#34;&gt;Computing net owed amount per user&lt;/h3&gt;

&lt;p&gt;Given a vector of expenses, we should be able to build the matrix holding what
is owed in net from a user to another:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;    Builds the matrix of net owed GraphCoins&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;function&lt;/span&gt; compute_net_owing(expenses&lt;span style=&#34;color: #555555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;Vector&lt;/span&gt;{Expense}, nusers&lt;span style=&#34;color: #555555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;Int&lt;/span&gt;)
    owing_matrix &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; zeros(GraphCoin, nusers, nusers)
    &lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# row owes to column&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; expense &lt;span style=&#34;color: #006699&#34;&gt;in&lt;/span&gt; expenses
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; user &lt;span style=&#34;color: #006699&#34;&gt;in&lt;/span&gt; expense&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;users
            &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;if&lt;/span&gt; user &lt;span style=&#34;color: #555555&#34;&gt;!=&lt;/span&gt; expense&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;payer
                owing_matrix[user,expense&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;payer] &lt;span style=&#34;color: #555555&#34;&gt;+=&lt;/span&gt; expense&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;amount &lt;span style=&#34;color: #555555&#34;&gt;/&lt;/span&gt; length(expense&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;users)
            &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# compute net owed amount&lt;/span&gt;
    net_owing &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; zeros(GraphCoin, nusers, nusers)    
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color: #006699&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;nusers&lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color: #006699&#34;&gt;in&lt;/span&gt; i&lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;nusers
            &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;if&lt;/span&gt; owing_matrix[i,j] &lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; owing_matrix[j,i]
                net_owing[i,j] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; owing_matrix[i,j] &lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt; owing_matrix[j,i]
            &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;elseif&lt;/span&gt; owing_matrix[i,j] &lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt; owing_matrix[j,i]
                net_owing[j,i] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; owing_matrix[j,i] &lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt; owing_matrix[i,j]
            &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; net_owing&lt;span style=&#34;color: #555555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;Matrix&lt;/span&gt;{GraphCoin}
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From that matrix, we should determine the net amount any user owes or is owed:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;    What is owed to a given user (negative if user owes money)&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;function&lt;/span&gt; net_owed_user(net_owing&lt;span style=&#34;color: #555555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;Matrix&lt;/span&gt;{GraphCoin})
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; (sum(net_owing,&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color: #555555&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt; sum(net_owing,&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;))[&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;]
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;sum&lt;/code&gt; function used with &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;2&lt;/code&gt; sums a matrix over its rows, columns
respectively. This computes a difference between what a user is owed and what
they owe.&lt;/p&gt;

&lt;h3 id=&#34;building-the-graph-and-the-corresponding-flow-problem&#34;&gt;Building the graph and the corresponding flow problem&lt;/h3&gt;

&lt;p&gt;A flow problem is determined by the directed graph (nodes and directed edges),
the minimal flow for any edge, a maximal flow or capacity for any edge and a
cost of having a certain flow going through each edge.&lt;/p&gt;

&lt;p&gt;First, we need to import LightGraphs, the core package of the JuliaGraph
ecosystem containing essential types.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;import LightGraphs; const lg = LightGraphs
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that I use explicit package import (not &lt;code&gt;using&lt;/code&gt;), an habit I
kept from using Python and that I consider more readable than importing
the whole package into the namespace. &lt;code&gt;lg&lt;/code&gt; has become my usual name for the
LightGraphs package.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;function&lt;/span&gt; build_graph(net_owing&lt;span style=&#34;color: #555555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;Matrix&lt;/span&gt;{GraphCoin})
    nusers &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; size(net_owing,&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;)
    g &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; lg&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;DiGraph(nusers &lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;)
    source &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; nusers &lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;
    sink &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; nusers &lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;
    net_user &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; net_owed_user(net_owing)
    v1 &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; [idx &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; idx &lt;span style=&#34;color: #006699&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;nusers &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;if&lt;/span&gt; net_user[idx] &lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;]
    v2 &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; [idx &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; idx &lt;span style=&#34;color: #006699&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;nusers &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;if&lt;/span&gt; net_user[idx] &lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;]
    capacity &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; zeros(GraphCoin, nusers&lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;,nusers&lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;)
    demand &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; zeros(GraphCoin, nusers&lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;,nusers&lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;)
    maxcap &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; sum(net_owing)
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; u1 &lt;span style=&#34;color: #006699&#34;&gt;in&lt;/span&gt; v1
        lg&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;add_edge!(g,source,u1)
        capacity[source,u1] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt;net_user[u1]
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; u2 &lt;span style=&#34;color: #006699&#34;&gt;in&lt;/span&gt; v2
            lg&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;add_edge!(g,u1,u2)
            capacity[u1,u2] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; maxcap
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; u2 &lt;span style=&#34;color: #006699&#34;&gt;in&lt;/span&gt; v2
        lg&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;add_edge!(g,u2,sink)
        capacity[u2,sink] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; maxcap
        demand[u2,sink] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; net_user[u2]
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;
    (g, capacity, demand)
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This function builds our graph structure and all informations we need attached.&lt;/p&gt;

&lt;h3 id=&#34;solving-the-flow-problem&#34;&gt;Solving the flow problem&lt;/h3&gt;

&lt;p&gt;Now that the components are set, we can solve the problem using another
component of the JuliaGraphs ecosystem specialized for flow problems:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using LightGraphsFlows: mincost_flow
using Clp: ClpSolver
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also need a Linear Programming solver to pass to the flow solver, all we
have to do is bundle the pieces together:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;function&lt;/span&gt; solve_expense(expenses&lt;span style=&#34;color: #555555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;Vector&lt;/span&gt;{Expense}, nusers&lt;span style=&#34;color: #555555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;Int&lt;/span&gt;)
    (g, capacity, demand) &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; build_graph(compute_net_owing(expenses, nusers))
    flow &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; mincost_flow(g, capacity, demand, ones(nusers&lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;,nusers&lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;), ClpSolver(), nusers&lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;, nusers&lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; flow[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;]
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We truncate the &lt;code&gt;flow&lt;/code&gt; matrix because we are only interested in what users
are paying each other, not in the flows from and to the source and sink.&lt;/p&gt;

&lt;h3 id=&#34;trying-out-our-solution&#34;&gt;Trying out our solution&lt;/h3&gt;

&lt;p&gt;Now that all functions are set, we can use it on any expense problem:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;expenses &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; [
    Expense(&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;Set&lt;/span&gt;([&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;])),
    Expense(&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;Set&lt;/span&gt;([&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;])),
    Expense(&lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;Set&lt;/span&gt;([&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;]))
]
solve_expense(expenses, &lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;pre&gt;&lt;code&gt;3×3 Array{Float64,2}:
  0.0  0.0  0.0
 18.0  0.0  0.0
  3.0  0.0  0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the result, each row pays to each column and voilà! Our three users don&amp;rsquo;t
have to feel the tension of unpaid debts anymore.&lt;/p&gt;

&lt;h2 id=&#34;conclusion-perspective-and-note-on-gphc&#34;&gt;Conclusion, perspective and note on GPHC&lt;/h2&gt;

&lt;p&gt;We managed to model our specific problem using &lt;em&gt;LightGraphs.jl&lt;/em&gt; and the
associated flow package pretty easily. I have to admit being biased since
I contributed to the JuliaGraphs ecosystem, if your impression is different
or if you have some feedback, don&amp;rsquo;t hesitate to file an issue on the
&lt;a href=&#34;https://github.com/JuliaGraphs&#34; target=&#34;_blank&#34;&gt;corresponding package&lt;/a&gt;, some awesome people
will help you figure things out as they helped me.&lt;/p&gt;

&lt;p&gt;There is one thing we ignored in our model, it&amp;rsquo;s the number of transactions
realized. Using this as an objective turns the problem into a
&lt;a href=&#34;https://en.wikipedia.org/wiki/Integer_programming#Variants&#34; target=&#34;_blank&#34;&gt;Mixed-Integer Linear Programming&lt;/a&gt; one,
which are much harder to solve and cannot use simple flow techniques. However,
I still haven&amp;rsquo;t found a case where our simple approach does not yield the
smallest number of transactions.&lt;/p&gt;

&lt;p&gt;Final word: I started the idea of this article long before the crypto-madness
(September actually), when currencies where still considered as boring,
nerdy or both, sorry about following the (late) hype. I even changed
GraphCoin symbol to GPHC because I found another one with which my initial
name conflicted.&lt;/p&gt;

&lt;p&gt;If you have questions or remarks on LightGraphs, LightGraphsFlows, the article
or anything related, don&amp;rsquo;t hesitate to &lt;a href=&#34;http://twitter.com/MathieuBesancon/&#34; target=&#34;_blank&#34;&gt;ping me&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Edits:&lt;br /&gt;
Special thanks to &lt;a href=&#34;http://www.bromberger.com/&#34; target=&#34;_blank&#34;&gt;Seth Bromberger&lt;/a&gt; for the review.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The cover image was created using
&lt;a href=&#34;https://github.com/JuliaGraphs/GraphPlot.jl&#34; target=&#34;_blank&#34;&gt;GraphPlot.jl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[1] James Fairbanks Seth Bromberger and other contributors. Juliagraphs/LightGraphs.jl:
Lightgraphs, 2017, &lt;a href=&#34;https://doi.org/10.5281/zenodo.889971&#34; target=&#34;_blank&#34;&gt;https://doi.org/10.5281/zenodo.889971&lt;/a&gt;. DOI: 10.5281/zenodo.889971&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DifferentialEquations.jl - part 2: decision from the model</title>
      <link>https://mbesancon.github.io/post/2017-12-20-diffeq-julia2/</link>
      <pubDate>Wed, 20 Dec 2017 00:00:00 -0500</pubDate>
      
      <guid>https://mbesancon.github.io/post/2017-12-20-diffeq-julia2/</guid>
      <description>

&lt;p&gt;In the &lt;a href=&#34;https://mbesancon.github.io/post/2017-12-14-diffeq-julia&#34;&gt;last article&lt;/a&gt;, we explored different modeling options for a
three-component systems which could represent the dynamics of a chemical
reaction or a disease propagation in a population. Building on top of this
model, we will formulate a desirable outcome and find a decision which
maximizes this outcome.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In addition to the packages imported in the last post,
we will also use &lt;a href=&#34;https://github.com/robertfeldt/BlackBoxOptim.jl&#34; target=&#34;_blank&#34;&gt;BlackBoxOptim.jl&lt;/a&gt;:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; DifferentialEquations
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;const&lt;/span&gt; DiffEq &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; DifferentialEquations
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; Plots
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; Optim
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;the-model&#34;&gt;The model&lt;/h2&gt;

&lt;p&gt;The same chemical system with three components, A, B and R will be used:
$$A + B → 2B$$  $$B → R$$&lt;/p&gt;

&lt;p&gt;The reactor where the reaction occurs must remain active for one minute.
Let&amp;rsquo;s imagine that $B$ is our valuable component while $R$ is a waste.
We want to maximize the quantity of $B$ present within the system after one
minute, that&amp;rsquo;s the objective function. For that purpose, we can choose to add
a certain quantity of new $A$ within the reactor at any point.
$$t_{inject} ∈ [0,t_{final}]$$.&lt;/p&gt;

&lt;h2 id=&#34;implementing-the-injection&#34;&gt;Implementing the injection&lt;/h2&gt;

&lt;p&gt;There is one major feature of DifferentialEquations.jl we haven&amp;rsquo;t explored yet:
the &lt;a href=&#34;http://docs.juliadiffeq.org/latest/features/callback_functions.html&#34; target=&#34;_blank&#34;&gt;event handling system&lt;/a&gt;.
This allows for the system state to change at a particular point in time,
depending on conditions on the time, state, etc&amp;hellip;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# defining the problem&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;const&lt;/span&gt; α &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;0.8&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;const&lt;/span&gt; β &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;3.0&lt;/span&gt;
diffeq &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;function&lt;/span&gt;(du, u, p, t)
    du[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt; α &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; u[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; u[&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;]
    du[&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; α &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; u[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; u[&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt; β &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; u[&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;]
    du[&lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; β &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; u[&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;]
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;
u0 &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color: #FF6600&#34;&gt;49.0&lt;/span&gt;;&lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;;&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;]
tspan &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
prob &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; DiffEq&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;ODEProblem(diffeq, u0, tspan)

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;const&lt;/span&gt; A_inj &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;30&lt;/span&gt;
inject_new &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;function&lt;/span&gt;(t0)
    condition(u, t, integrator) &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; t0 &lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt; t
    affect! &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;function&lt;/span&gt;(integrator)
        integrator&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;u[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; integrator&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;u[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt; A_inj
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;
    callback &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; DiffEq&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;ContinuousCallback(condition, affect!)
    sol &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; DiffEq&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;solve(prob, callback&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;callback)
    sol
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# trying it out with an injection at t=0.4&lt;/span&gt;
sol &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; inject_new(&lt;span style=&#34;color: #FF6600&#34;&gt;0.4&lt;/span&gt;)
Plots&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;plot(sol)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src=&#34;https://mbesancon.github.io/img/posts/DiffEq/inject.png&#34; alt=&#34;Injection simulation&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ContinuousCallback&lt;/code&gt; construct is the central element here, it takes as
information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When to trigger the event, implemented as the &lt;code&gt;condition&lt;/code&gt; function. It triggers
when this function reaches 0, which is here the case when $t = t_0$.&lt;/li&gt;
&lt;li&gt;What to do with the state at that moment. The state is encapsulated within
the &lt;em&gt;integrator&lt;/em&gt; variable. In our case, we add 30 units to the concentration in &lt;em&gt;A&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As we can see on the plot, a discontinuity appears on the concentration in A
at the injection time, the concentration in B restarts increasing.&lt;/p&gt;

&lt;h2 id=&#34;finding-the-optimal-injection-time-visual-approach&#34;&gt;Finding the optimal injection time: visual approach&lt;/h2&gt;

&lt;p&gt;From the previously built function, we can get the whole solution with a given
injection time, and from that the final state of the system.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;tinj_span &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;0.05&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;0.005&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;0.95&lt;/span&gt;
final_b &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; [inject_new(tinj)&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;u[&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;][&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; tinj &lt;span style=&#34;color: #006699&#34;&gt;in&lt;/span&gt; tinj_span]
Plots&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;plot(tinj_span, final_b)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using a plain for comprehension, we fetch the solution of the simulation for
the callback built with each $t_{inject}$.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://mbesancon.github.io/img/posts/DiffEq/optimal_inject.png&#34; alt=&#34;Quantity of B&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Injecting $A$ too soon lets too much time for the created $B$ to turn into $R$,
but injecting it too late does not let enough time for $B$ to be produced from
the injected $A$. The optimum seems to be around ≈ 0.82,&lt;/p&gt;

&lt;h2 id=&#34;finding-the-optimum-using-optim-jl&#34;&gt;Finding the optimum using Optim.jl&lt;/h2&gt;

&lt;p&gt;The package requires an objective function which takes a vector as input.
In our case, the decision is modeled as a single variable (the injection time),
&lt;strong&gt;it&amp;rsquo;s crucial to make the objective use a vector nonetheless&lt;/strong&gt;, otherwise
calling the solver will just explode with cryptic errors.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;compute_finalb &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; tinj &lt;span style=&#34;color: #555555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; inject_new(tinj[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;])&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;u[&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;][&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;]
Optim&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;optimize(compute_finalb, &lt;span style=&#34;color: #FF6600&#34;&gt;0.1&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.9&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We get a detailed result of the optimization including the method and iterations:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* Algorithm: Brent&#39;s Method
* Search Interval: [0.100000, 0.900000]
* Minimizer: 8.355578e-01
* Minimum: -2.403937e+01
* Iterations: 13
* Convergence: max(|x - x_upper|, |x - x_lower|) &amp;lt;= 2*(1.5e-08*|x|+2.2e-16): true
* Objective Function Calls: 14
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The function &lt;code&gt;inject_new&lt;/code&gt; we defined above returns the complete solution
of the simulation, we get the state matrix &lt;code&gt;u&lt;/code&gt;, from which we extract the
final state &lt;code&gt;u[end]&lt;/code&gt;, and then the second component, the concentration in
B: &lt;code&gt;u[end][2]&lt;/code&gt;. The optimization algorithm minimizes the objective, while we want
to maximize the final concentration of B, hence the -1 multiplier used for&lt;br /&gt;
&lt;code&gt;compute_finalb&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We can use the Optim.jl package because our function is twice differentiable,
the best improvement direction is easy to compute.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;extending-the-model&#34;&gt;Extending the model&lt;/h2&gt;

&lt;p&gt;The decision over one variable was pretty straightforward. We are going to
extend it by changing how the $A$ component is added at $t_{inject}$.
Instead of being completely dissolved, a part of the component will keep being
poured in after $t_{inject}$. So the decision will be composed of two variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The time of the beginning of the injection&lt;/li&gt;
&lt;li&gt;The part of $A$ to inject directly and the part to inject in a
continuous fashion. We will note the fraction injected directly $\delta$.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given a fixed available quantity $A₀$ and a fraction to inject directly $\delta$,
the concentration in A is increased of $\delta \cdot A₀$ at time $t_{inject}$,
after which the rate of change of the concentration in A is increased by a
constant amount, until the total amount of A injected (directly and over time)
is equal to the planned quantity.&lt;/p&gt;

&lt;p&gt;We need a new variable in the state of the system, $u_4(t)$, which stands
for the input flow of A being active or not.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$u(t) = 0$ if $t &amp;lt; t_{inject}$&lt;/li&gt;
&lt;li&gt;$u(t) = 0$ if the total flow of A which has been injected is equal to the planned quantity&lt;/li&gt;
&lt;li&gt;$u(t) = \dot{A}\ $ otherwise, with $\dot{A}\ $ the rate at which A is being poured.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;new-julia-equations&#34;&gt;New Julia equations&lt;/h2&gt;

&lt;p&gt;We already built the key components in the previous sections. This time we need
two events:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A is directly injected at $t_{inject}$, and then starts being poured at constant rate&lt;/li&gt;
&lt;li&gt;A stops being poured when the total quantity has been used&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;const&lt;/span&gt; inj_quantity &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;30.0&lt;/span&gt;;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;const&lt;/span&gt; inj_rate &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;40.0&lt;/span&gt;;

diffeq_extended &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;function&lt;/span&gt;(du, u, p, t)
    du[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt; α &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; u[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; u[&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt; u[&lt;span style=&#34;color: #FF6600&#34;&gt;4&lt;/span&gt;]
    du[&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; α &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; u[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; u[&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt; β &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; u[&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;]
    du[&lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; β &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; u[&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;]
    du[&lt;span style=&#34;color: #FF6600&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;

u0 &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color: #FF6600&#34;&gt;49.0&lt;/span&gt;;&lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;;&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;;&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;]
tspan &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
prob &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; DiffEq&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;ODEProblem(diffeq_extended, u0, tspan)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We wrap the solution building process into a function taking the starting time
and the fraction being directly injected as parameters:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;inject_progressive &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;function&lt;/span&gt;(t0, direct_frac)
    condition_start(u, t, integrator) &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; t0 &lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt; t
    affect_start! &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;function&lt;/span&gt;(integrator)
        integrator&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;u[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; integrator&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;u[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt; inj_quantity &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; direct_frac
        integrator&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;u[&lt;span style=&#34;color: #FF6600&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; inj_rate
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;
    callback_start &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; DiffEq&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;ContinuousCallback(
        condition_start, affect_start!, save_positions&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;true&lt;/span&gt;)
    )
    condition_end(u, t, integrator) &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; (t &lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt; t0) &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; inj_rate &lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt; inj_quantity &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt; direct_frac)
    affect_end! &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;function&lt;/span&gt;(integrator)
        integrator&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;u[&lt;span style=&#34;color: #FF6600&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;
    callback_end &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; DiffEq&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;ContinuousCallback(condition_end, affect_end!, save_positions&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;true&lt;/span&gt;))
    sol &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; DiffEq&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;solve(prob, callback&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;DiffEq&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;CallbackSet(callback_start, callback_end), dtmax&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;0.005&lt;/span&gt;)
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;

Plots&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;plot(inject_progressive(&lt;span style=&#34;color: #FF6600&#34;&gt;0.6&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;0.6&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can notice &lt;code&gt;callback_start&lt;/code&gt; being identical to the model we previously built,
while &lt;code&gt;condition_end&lt;/code&gt; corresponds to the time when the total injected
quantity reaches &lt;code&gt;inj_quantity&lt;/code&gt;. The first events activates $u_4$ and sets it
to the nominal flow, while the second callback resets it to 0.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://mbesancon.github.io/img/posts/DiffEq/const_rate.png&#34; alt=&#34;Constant rate&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Optim.jl can be re-used to determine the optimal decision:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;objective &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;function&lt;/span&gt;(x)
    sol &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; inject_progressive(x[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;], x[&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;])
    &lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt;sol&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;u[&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;][&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;]
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# wrapped objective function and starting point&lt;/span&gt;
x0 &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;0.5&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt;ones(&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;)
wrapped_obj &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; Optim&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;OnceDifferentiable(objective, x0)
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# call optimize with box algorithm&lt;/span&gt;
Optim&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;optimize(wrapped_obj, x0, [&lt;span style=&#34;color: #FF6600&#34;&gt;0.1&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;], [&lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;], Optim&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;Fminbox())
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The result details are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* Algorithm: Fminbox with Conjugate Gradient
* Starting Point: [0.5,0.5]
* Minimizer: [0.8355419400368459,0.9999654432422779]
* Minimum: -2.404040e+01
* Iterations: 4
* Convergence: true
  * |x - x&#39;| ≤ 1.0e-32: false
    |x - x&#39;| = 3.43e-04
  * |f(x) - f(x&#39;)| ≤ 1.0e-32 |f(x)|: true
    |f(x) - f(x&#39;)| = -6.85e-11 |f(x)|
  * |g(x)| ≤ 1.0e-08: false
    |g(x)| = 9.05e-08
  * Stopped by an increasing objective: true
  * Reached Maximum Number of Iterations: false
* Objective Calls: 125
* Gradient Calls: 79
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We wrap our function in a &lt;code&gt;Optim.OnceDifferentiable&lt;/code&gt; to provide Optim with the
information is differentiable, even though we don&amp;rsquo;t provide a gradient.&lt;/p&gt;

&lt;p&gt;The optimal solution corresponds to a complete direct injection
($\delta \approx 1$) with $t_{inject}^{opt}$ identical to the previous model.
This means pouring the A component in a continuous fashion does not allow to
produce more $B$ at the end of the minute.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We could still built on top of this model to keep refining it, taking more
phenomena into account (what if the reactions produce heat and are sensitive
to temperature?). The structures describing models built with
DifferentialEquations.jl are transparent and easy to use for further manipulations.&lt;/p&gt;

&lt;p&gt;One point on which I place expectations is some additional interoperability
between DifferentialEquations.jl and &lt;a href=&#34;https://github.com/JuliaOpt/JuMP.jl&#34; target=&#34;_blank&#34;&gt;JuMP&lt;/a&gt;,
a Julia meta-package for optimization. Some great work was already performed to
combine the two systems, one use case that has been described is the parameter
identification problem (given the evolution of concentration in the system,
identify the α and β parameters).&lt;/p&gt;

&lt;p&gt;But given that the function I built from a parameter was a black box
(without an explicit formula, not a gradient), I had to use BlackBoxOptim,
which is amazingly straightforward, but feels a bit overkill for smooth
functions as presented here. Maybe there is a different way to build the
objective function, using parametrized functions for instance, which could
make it transparent to optimization solvers.&lt;/p&gt;

&lt;p&gt;If somebody has info on that last point or feedback, additional info you&amp;rsquo;d like
to share regarding this post, hit me on &lt;a href=&#34;https://twitter.com/MathieuBesancon&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt;.
Thanks for reading!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;edits-and-improvements&#34;&gt;Edits and improvements&lt;/h2&gt;

&lt;p&gt;2018-01-31:&lt;br /&gt;
I updated this post to adapt to the new DifferentialEquations.jl
interface. I also used Optim.jl for the two cases without BlackBoxOptim.jl,
which is very nice but not neccesary for differentiable functions.&lt;/p&gt;

&lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/pkofod&#34; target=&#34;_blank&#34;&gt;Patrick&lt;/a&gt; for his quick response
and help with &lt;code&gt;Optim.jl&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;2017-12-20:&lt;br /&gt;
Of course, BlackBoxOptim.jl was not the most appropriate algorithm as
predicted. &lt;a href=&#34;https://twitter.com/pkofod&#34; target=&#34;_blank&#34;&gt;Patrick&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/ChrisRackauckas&#34; target=&#34;_blank&#34;&gt;Chris&lt;/a&gt;
gave me some hints in &lt;a href=&#34;https://twitter.com/MathieuBesancon/status/943662063074906112&#34; target=&#34;_blank&#34;&gt;this thread&lt;/a&gt;
and I gave &lt;a href=&#34;https://github.com/JuliaNLSolvers/Optim.jl&#34; target=&#34;_blank&#34;&gt;Optim.jl&lt;/a&gt; a try.&lt;/p&gt;

&lt;p&gt;This package has a range of algorithms to choose from depending on the
structure of the function and the knowledge of its gradient and Hessian.
The goal is continuous optimization, (as opposed to BlackBoxOptim.jl which supports
more exotic search spaces).&lt;/p&gt;

&lt;p&gt;Finding the optimum $t_{inject}$ of the first problem is pretty simple:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; Optim
Optim&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;optimize(compute_finalb, &lt;span style=&#34;color: #FF6600&#34;&gt;0.1&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.9&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This yields the following information:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Results of Optimization Algorithm
 * Algorithm: Brent&#39;s Method
 * Search Interval: [0.100000, 0.900000]
 * Minimizer: 8.355891e-01
 * Minimum: -2.403824e+01
 * Iterations: 13
 * Convergence: max(|x - x_upper|, |x - x_lower|) &amp;lt;= 2*(1.5e-08*|x|+2.2e-16): true
 * Objective Function Calls: 14
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;14 calls to the objective function, pretty neat compared to the hundreds of
BlackBoxOptim. We also confirm the optimum of &lt;code&gt;0.8355891&lt;/code&gt;. Not yet sure we could
use Optim.jl for the second case (boxed multivariate optimization without explicit gradient).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;font size=&#34;0.7&#34;&gt;
 [1] Cover image: Lorenz attractor on &lt;a href=&#34;https://commons.wikimedia.org/wiki/File:Lorenz_attractor2.svg&#34; target=&#34;_blank&#34;&gt;Wikimedia&lt;/a&gt;, again.
&lt;/font&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with DifferentialEquations.jl</title>
      <link>https://mbesancon.github.io/post/2017-12-14-diffeq-julia/</link>
      <pubDate>Thu, 14 Dec 2017 00:00:00 -0500</pubDate>
      
      <guid>https://mbesancon.github.io/post/2017-12-14-diffeq-julia/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/JuliaDiffEq/DifferentialEquations.jl&#34; target=&#34;_blank&#34;&gt;DifferentialEquations.jl&lt;/a&gt;
came to be a key component of Julia&amp;rsquo;s scientific ecosystem. After checking the
JuliaCon talk of its creator, I couldn&amp;rsquo;t wait to start building stuff with it,
so I created and developed a simple example detailed in this blog post.
Starting from a basic ordinary differential equation (ODE), we add noise,
making it stochastic, and finally turn it into a discrete version.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Before running the code below, two imports will be used:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; DifferentialEquations
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;const&lt;/span&gt; DiffEq &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; DifferentialEquations
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; Plots
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I tend to prefer explicit imports in Julia code, it helps to see from which
part each function and type comes. As &lt;code&gt;DifferentialEquations&lt;/code&gt; is longuish to
write, we use an alias in the rest of the code.&lt;/p&gt;

&lt;h2 id=&#34;the-model&#34;&gt;The model&lt;/h2&gt;

&lt;p&gt;We use a simple 3-element state in a differential equation. Depending on your
background, pick the interpretation you prefer:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;An SIR model, standing for susceptible, infected, and recovered, directly
inspired by the talk and by the &lt;a href=&#34;https://github.com/sdwfrost/Gillespie.jl&#34; target=&#34;_blank&#34;&gt;Gillespie.jl&lt;/a&gt;
package. We have a total population with healthy people, infected people
(after they catch the disease) and recovered (after they heal from the disease).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A chemical system with three components, A, B and R.
$$A + B → 2B$$  $$B → R$$&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After searching my memory for chemical engineering courses and the
&lt;a href=&#34;https://en.wikipedia.org/wiki/Autocatalysis&#34; target=&#34;_blank&#34;&gt;universal source of knowledge&lt;/a&gt;,
I could confirm the first reaction is an autocatalysis, while the second is
a simple reaction. An autocatalysis means that B molecules turn A molecules
into B, without being consumed.&lt;/p&gt;

&lt;p&gt;The first example is easier to represent as a discrete problem: finite
populations make more sense when talking about people. However, it can be seen
as getting closer to a continuous differential equation as the number of people
get higher. The second model makes more sense in a continuous version as we are
dealing with concentrations of chemical components.&lt;/p&gt;

&lt;h2 id=&#34;a-first-continuous-model&#34;&gt;A first continuous model&lt;/h2&gt;

&lt;p&gt;Following the tutorials from the
&lt;a href=&#34;http://docs.juliadiffeq.org/latest/tutorials/ode_example.html#Example-2:-Solving-Systems-of-Equations-1&#34; target=&#34;_blank&#34;&gt;official package website&lt;/a&gt;,
we can build our system from:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A system of differential equations: how does the system behave (dynamically)&lt;/li&gt;
&lt;li&gt;Initial conditions: where does the system start&lt;/li&gt;
&lt;li&gt;A time span: how long do we want to observe the system&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The system state can be written as:
$$u(t) =
\begin{bmatrix}
u₁(t) \&lt;br /&gt;
u₂(t) \&lt;br /&gt;
u₃(t)&lt;br /&gt;
\end{bmatrix}^T
$$&lt;/p&gt;

&lt;p&gt;With the behavior described as:
$$
\dot{u}(t) = f(u,t)
$$
And the initial conditions $u(0) = u₀$.&lt;/p&gt;

&lt;p&gt;In Julia with DifferentialEquations, this becomes:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;α &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;0.8&lt;/span&gt;
β &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;3.0&lt;/span&gt;
diffeq &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;function&lt;/span&gt;(du, u, p, t)
    du[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt; α &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; u[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; u[&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;]
    du[&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; α &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; u[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; u[&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt; β &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; u[&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;]
    du[&lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; β &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; u[&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;]
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;
u₀ &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color: #FF6600&#34;&gt;49.0&lt;/span&gt;;&lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;;&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;]
tspan &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;diffeq&lt;/code&gt; models the dynamic behavior, &lt;code&gt;u₀&lt;/code&gt; the starting conditions
and &lt;code&gt;tspan&lt;/code&gt; the time range over which we observe the system
evolution. Note that the &lt;code&gt;diffeq&lt;/code&gt; function also take a &lt;code&gt;p&lt;/code&gt; argument for parameters,
in which we could have stored $\alpha$ and $\beta$.&lt;/p&gt;

&lt;p&gt;We know that our equation is smooth, so we&amp;rsquo;ll let
&lt;code&gt;DifferentialEquations.jl&lt;/code&gt; figure out the solver. The general API
of the package is built around two steps:&lt;br /&gt;
1. Building a problem/model from behavior and initial conditions
2. Solving the problem using a solver of our choice and providing additional
information on how to solve it, yielding a solution.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;prob &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; DiffEq&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;ODEProblem(diffeq, u₀, tspan)
sol &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; DiffEq&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;solve(prob)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One very nice property of solutions produced by the package is that they
contain a direct way to produce plots. This is fairly common in Julia to
implement methods from other packages, here the &lt;code&gt;ODESolution&lt;/code&gt; type implements
Plots.plot:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Plots&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;plot(sol)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src=&#34;https://mbesancon.github.io/img/posts/DiffEq/smooth.png&#34; alt=&#34;Solution to the ODE&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If we use the disease propagation example, $u₁(t)$ is the number of
healthy people who haven&amp;rsquo;t been infected. It starts high, which makes the rate
of infection by the diseased population moderate. As the number of sick people
increases, the rate of infection increases: there are more and more possible
contacts between healthy and sick people.&lt;/p&gt;

&lt;p&gt;As the number of sick people increases, the recovery rate also increases,
absorbing more sick people. So the &amp;ldquo;physics&amp;rdquo; behind the problem makes sense
with what we observe on the curve.&lt;/p&gt;

&lt;p&gt;A key property to notice is the mass conservation: the sum of the three elements
of the vector is constant (the total population in the health case). This makes
sense from the point of view of the equations:
$$\frac{du₁}{dt} + \frac{du₂}{dt} + \frac{du_3}{dt} = 0$$&lt;/p&gt;

&lt;h2 id=&#34;adding-randomness-first-attempt-with-a-simple-sde&#34;&gt;Adding randomness: first attempt with a simple SDE&lt;/h2&gt;

&lt;p&gt;The previous model works successfully, but remains naive. On small populations,
the rate of contamination and recovery cannot be so smooth. What if some sick
people isolate themselves from others for an hour or so, what there is a
meeting organized, with higher chances of contacts? All these plausible events
create different scenarios that are more or less likely to happen.&lt;/p&gt;

&lt;p&gt;To represent this, the rate of change of the three variables of the system
can be considered as composed of a deterministic part and of a random variation.
One standard representation for this, as laid out in the
&lt;a href=&#34;http://docs.juliadiffeq.org/latest/tutorials/sde_example.html&#34; target=&#34;_blank&#34;&gt;package documentation&lt;/a&gt;
is the following:
$$
du = f(u,t) dt + ∑ gᵢ(u,t) dWᵢ
$$&lt;/p&gt;

&lt;p&gt;In our case, we could consider two points of randomness at the two interactions
(one for the transition from healthy to sick, and one from sick to recovered).&lt;/p&gt;

&lt;h1 id=&#34;stochastic-version&#34;&gt;Stochastic version&lt;/h1&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;σ1 &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;0.07&lt;/span&gt;
σ2 &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;0.4&lt;/span&gt;
noise_func &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;function&lt;/span&gt;(du, u, p, t)
    du[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; σ1 &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; u[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; u[&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;]
    du[&lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; σ2 &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; u[&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;]
    du[&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt; du[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;]  &lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt; du[&lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;]
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;

stoch_prob &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; DiffEq&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;SDEProblem(diffeq, noise_func, u₀, tspan)
sol_stoch &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; DiffEq&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;solve(stoch_prob, DiffEq&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;SRIW1())
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that we also change the solver provided to the &lt;code&gt;solve&lt;/code&gt; function to adapt
to stochastic equations. The last variation is set to the opposite of the sum
of the two others to compensate the two other variations (we said we had only
one randomness phenomenon per state transition).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://mbesancon.github.io/img/posts/DiffEq/sde.png&#34; alt=&#34;SDE&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Woops, something went wrong. This time the mass conservation doesn&amp;rsquo;t hold,
we finish with a population below the initial condition. What is wrong is that
we don&amp;rsquo;t define the &lt;strong&gt;variation&lt;/strong&gt; but the &lt;em&gt;gᵢ(u,t)&lt;/em&gt; function, which is then
multiplied by &lt;em&gt;dWᵢ&lt;/em&gt;. Since we used the function signature corresponding to
the diagonal noise, there is a random component per $uᵢ$ variable.&lt;/p&gt;

&lt;h2 id=&#34;adding-randomness-second-attempt-with-non-diagonal-noise&#34;&gt;Adding randomness: second attempt with non-diagonal noise&lt;/h2&gt;

&lt;p&gt;As explained above, we need one source of randomness for each transition.
This results in a $G(u,t)$ matrix of $3 × 2$. We can then make sure that the
the sum of variations for the three variables cancel out to keep a constant
total population.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;noise_func_cons &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;function&lt;/span&gt;(du, u, p, t)
    du[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; σ1 &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; u[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; u[&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;]
    du[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;
    du[&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt; σ1 &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; u[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; u[&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;]
    du[&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt; σ2 &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; u[&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;]
    du[&lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;
    du[&lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; σ2 &lt;span style=&#34;color: #555555&#34;&gt;*&lt;/span&gt; u[&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;]
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;end&lt;/span&gt;
sde_cons &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; DiffEq&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;SDEProblem(
    diffeq, noise_func_cons, u₀, tspan,
    noise_rate_prototype&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;zeros(&lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;)
)
cons_solution &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; DiffEq&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;solve(sde_cons, DiffEq&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;EM(), dt&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;500&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We also provide a &lt;code&gt;noise_rate_prototype&lt;/code&gt; parameter to the problem builder to
indicate we don&amp;rsquo;t want to use a diagonal noise.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://mbesancon.github.io/img/posts/DiffEq/sde_nondiag.png&#34; alt=&#34;SDE&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This time the population conservation holds, at any point in time the sum of
the $uᵢ(t)$ remains 50.&lt;/p&gt;

&lt;h2 id=&#34;discretizing-gillespie-model&#34;&gt;Discretizing: Gillespie model&lt;/h2&gt;

&lt;p&gt;The models we produced so far represent well the chemical reaction problem,
but a bit less the disease propagation. We are using continuous quantities
to represent discrete populations, how do we interpret 0.6 people sick at a time?&lt;/p&gt;

&lt;p&gt;One major strength of the package is its effortless integration of discrete
phenomena in a model, alone or combined with continuous dynamics. Our model
follows exactly the package tutorial on
&lt;a href=&#34;http://docs.juliadiffeq.org/latest/tutorials/discrete_stochastic_example.html&#34; target=&#34;_blank&#34;&gt;discrete stochastic problems&lt;/a&gt;,
so building it should be straightforward.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;infect_rate &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; DiffEq&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;Reaction(α, [&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;],[(&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;),(&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;)])
recover_rate &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; DiffEq&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;Reaction(β, [&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;],[(&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;),(&lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;)])
disc_prob &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; DiffEq&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;GillespieProblem(
    DiffEq&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;DiscreteProblem(round&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;(&lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;Int&lt;/span&gt;,u₀), tspan),
    DiffEq&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;Direct(),
    infect_rate, recover_rate,
)
disc_sol &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; DiffEq&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;solve(disc_prob, DiffEq&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;Discrete());
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We define the infection and recovery rate and the variables $uᵢ$ that are
affected, and call the Discrete solver. The Plots.jl integration once again
yields a direct representation of the solution over the time span.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://mbesancon.github.io/img/posts/DiffEq/discrete.png&#34; alt=&#34;SDE&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Again, the conservation of the total population is guaranteed by the effect of
the jumps deleting one unit from a population to add it to the other.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The DifferentialEquations.jl package went from a good surprise to a key tool in
my scientific computing toolbox. It does not require learning another embedded
language but makes use of real idiomatic Julia. The interface is clean and
working on edge cases does not feel hacky. I&amp;rsquo;ll be looking forward to using
it in my PhD or side-hacks, especially combined to the
&lt;a href=&#34;https://github.com/JuliaOpt/JuMP.jl&#34; target=&#34;_blank&#34;&gt;JuMP.jl&lt;/a&gt; package: DifferentialEquations
used to build simulations and JuMP to optimize a cost function on top of the
created model.&lt;/p&gt;

&lt;p&gt;Thanks for reading, hit me on &lt;a href=&#34;https://twitter.com/MathieuBesancon&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt;
for feedback or questions ;)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Edits:&lt;/p&gt;

&lt;p&gt;I updated this post to fit the new DifferentialEquations.jl 4.0 syntax. Some
changes are breaking the previous API, it can be worth it to check it out
&lt;a href=&#34;http://juliadiffeq.org/2018/01/24/Parameters.html&#34; target=&#34;_blank&#34;&gt;in detail&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/ChrisRackauckas&#34; target=&#34;_blank&#34;&gt;Chris&lt;/a&gt;, the creator and main developer
of DifferentialEquations.jl, gave me valuable tips on two
points which have been edited in the article. You can find the thread
&lt;a href=&#34;https://twitter.com/MathieuBesancon/status/941825252744507392&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import aliases should use &lt;code&gt;const PackageAlias = PackageName&lt;/code&gt; for type
stability. This allows the compiler to generate efficient code.
Some further mentions of type-stability can be found in the
&lt;a href=&#34;https://docs.julialang.org/en/latest/manual/performance-tips&#34; target=&#34;_blank&#34;&gt;official doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The second attempts uses non-diagonal noise, the &amp;ldquo;:additive&amp;rdquo; hint I passed
to the solve function does not hold. Furthermore, the appropriate algorithm in
that case is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Euler%E2%80%93Maruyama_method&#34; target=&#34;_blank&#34;&gt;Euler-Maruyama method&lt;/a&gt;
.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many thanks to him for these tips, having such devoted and friendly developers
is also what makes an open-source project successful.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;font size=&#34;0.7&#34;&gt;
 [1] Cover image: Lorenz attractor on &lt;a href=&#34;https://commons.wikimedia.org/wiki/File:Lorenz_attractor2.svg&#34; target=&#34;_blank&#34;&gt;Wikimedia&lt;/a&gt;
&lt;/font&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
