<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graph on μβ</title>
    <link>https://matbesancon.github.io/tags/graph/</link>
    <description>Recent content in Graph on μβ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Mathieu Besançon</copyright>
    <lastBuildDate>Sun, 07 Apr 2019 00:00:00 +0200</lastBuildDate>
    
	<atom:link href="https://matbesancon.github.io/tags/graph/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Picking different names with integer optimization</title>
      <link>https://matbesancon.github.io/post/2019-04-07-name_distances/</link>
      <pubDate>Sun, 07 Apr 2019 00:00:00 +0200</pubDate>
      
      <guid>https://matbesancon.github.io/post/2019-04-07-name_distances/</guid>
      <description>I must admit I am not always the most talented at social events. One point I am especially bad at is remembering names, and it gets even harder when lots of people have similar or similar-sounding names. What if we could select a list of people with names as different from each other as possible?
First some definitions, different here is meant with respect to the Hamming distance of any two names.</description>
    </item>
    
    <item>
      <title>Building our own graph type in Julia</title>
      <link>https://matbesancon.github.io/post/2018-08-17-abstract_graph/</link>
      <pubDate>Fri, 17 Aug 2018 00:00:00 +0200</pubDate>
      
      <guid>https://matbesancon.github.io/post/2018-08-17-abstract_graph/</guid>
      <description>This is an adapted post on the talk we gave with James at JuliaCon 2018 in London. You can see the original slides, the video still requires a bit of post-processing.
Last week JuliaCon in London was a great and very condensed experience. The two talks on LightGraphs.jl received a lot of positive feedback and more than that, we saw how people are using the library for a variety of use cases which is a great signal for the work on the JuliaGraphs ecosystem (see the lightning talk).</description>
    </item>
    
    <item>
      <title>Solving the group expenses headache with graphs</title>
      <link>https://matbesancon.github.io/post/2017-09-11-graph-theory-expenses-management/</link>
      <pubDate>Mon, 15 Jan 2018 00:00:00 +0100</pubDate>
      
      <guid>https://matbesancon.github.io/post/2017-09-11-graph-theory-expenses-management/</guid>
      <description>With the end-of-year celebrations, we all had some expenses to manage, some of them shared with friends, and we all have this eternal problem of splitting them fairly.
 Les bons comptes font les bons amis. French wisdom
 Applications like Tricount or Splitwise became famous precisely by solving this problem for you: just enter the expenses one by one, with who owes whom and you&amp;rsquo;ll get the simplest transactions to balance the amounts at the end.</description>
    </item>
    
  </channel>
</rss>