<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>interface on μβ</title>
    <link>https://matbesancon.github.io/tags/interface/</link>
    <description>Recent content in interface on μβ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-ca</language>
    <copyright>&amp;copy; 2019 Mathieu Besançon</copyright>
    <lastBuildDate>Thu, 25 Jul 2019 18:14:43 +0200</lastBuildDate>
    
	<atom:link href="https://matbesancon.github.io/tags/interface/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Leveraging special graph shapes in LightGraphs</title>
      <link>https://matbesancon.github.io/post/2019-07-25-special-graphs/</link>
      <pubDate>Thu, 25 Jul 2019 18:14:43 +0200</pubDate>
      
      <guid>https://matbesancon.github.io/post/2019-07-25-special-graphs/</guid>
      <description>In a previous post, we pushed the boundaries of the LightGraphs.jl abstraction to see how conforming the algorithms are to the declared interface, noticing some implied assumptions that were not stated. This has led to the development of VertexSafeGraphs.jl and soon to some work on LightGraphs.jl itself.
Another way to push the abstraction came out of the JuliaNantes workshop: leveraging some special structure of graphs to optimize some specific operations.</description>
    </item>
    
    <item>
      <title>Vertex removal in LightGraphs</title>
      <link>https://matbesancon.github.io/post/2019-05-30-vertex-safe-removal/</link>
      <pubDate>Thu, 30 May 2019 11:14:43 +0200</pubDate>
      
      <guid>https://matbesancon.github.io/post/2019-05-30-vertex-safe-removal/</guid>
      <description>In various graph-related algorithms, a graph is modified through successive operations, merging, creating and deleting vertices. That&amp;rsquo;s the case for the Blossom algorithm finding a best matching in a graph and using contractions of nodes. In such cases, it can be useful to remove only the vertex being contracted, and maintain the number of all other vertices.
LightGraphs.jl offers a set of abstractions, types and algorithms to get started with graphs.</description>
    </item>
    
    <item>
      <title>Building our own graph type in Julia</title>
      <link>https://matbesancon.github.io/post/2018-08-17-abstract_graph/</link>
      <pubDate>Fri, 17 Aug 2018 00:00:00 +0200</pubDate>
      
      <guid>https://matbesancon.github.io/post/2018-08-17-abstract_graph/</guid>
      <description>Who needs libraries when from scratch looks so good</description>
    </item>
    
  </channel>
</rss>